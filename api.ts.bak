/* tslint:disable */
/* eslint-disable */
/**
 * Management Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Represents DocsVision connection search parameters
 * @export
 * @interface DocsVisionManagementConsoleDvFindDvConnectionModel
 */
export interface DocsVisionManagementConsoleDvFindDvConnectionModel {
    /**
     * Docsvision server connect address
     * @type {string}
     * @memberof DocsVisionManagementConsoleDvFindDvConnectionModel
     */
    'connectAddress'?: string | null;
    /**
     * Database name
     * @type {string}
     * @memberof DocsVisionManagementConsoleDvFindDvConnectionModel
     */
    'database'?: string | null;
}
/**
 * Represents about information
 * @export
 * @interface DocsVisionWebAdminConsoleAboutAboutInformation
 */
export interface DocsVisionWebAdminConsoleAboutAboutInformation {
    /**
     * Gets or sets application name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleAboutAboutInformation
     */
    'applicationName'?: string | null;
    /**
     * Gets or sets application build version
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleAboutAboutInformation
     */
    'buildVersion'?: string | null;
    /**
     * Gets or sets server list of server extensions
     * @type {Array<DocsVisionWebAdminConsoleLogicExtensionInfo>}
     * @memberof DocsVisionWebAdminConsoleAboutAboutInformation
     */
    'extensions'?: Array<DocsVisionWebAdminConsoleLogicExtensionInfo> | null;
    /**
     * Gets or sets list of used third-party components
     * @type {Array<DocsVisionWebAdminConsoleAboutThirdPartyComponentInfo>}
     * @memberof DocsVisionWebAdminConsoleAboutAboutInformation
     */
    'thirdPartyComponents'?: Array<DocsVisionWebAdminConsoleAboutThirdPartyComponentInfo> | null;
}
/**
 * Represents third-party component information
 * @export
 * @interface DocsVisionWebAdminConsoleAboutThirdPartyComponentInfo
 */
export interface DocsVisionWebAdminConsoleAboutThirdPartyComponentInfo {
    /**
     * Gets or sets third-party component name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleAboutThirdPartyComponentInfo
     */
    'name'?: string | null;
    /**
     * Gets or sets third-party component name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleAboutThirdPartyComponentInfo
     */
    'version'?: string | null;
    /**
     * Gets or sets third-party component developers site
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleAboutThirdPartyComponentInfo
     */
    'site'?: string | null;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleAboutThirdPartyComponentLicenseInfo}
     * @memberof DocsVisionWebAdminConsoleAboutThirdPartyComponentInfo
     */
    'license'?: DocsVisionWebAdminConsoleAboutThirdPartyComponentLicenseInfo;
}
/**
 * Represents third-party component license information
 * @export
 * @interface DocsVisionWebAdminConsoleAboutThirdPartyComponentLicenseInfo
 */
export interface DocsVisionWebAdminConsoleAboutThirdPartyComponentLicenseInfo {
    /**
     * Gets or sets third-party component license type
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleAboutThirdPartyComponentLicenseInfo
     */
    'type'?: string | null;
    /**
     * Gets or sets third-party component license url
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleAboutThirdPartyComponentLicenseInfo
     */
    'url'?: string | null;
}
/**
 * Represents application settings
 * @export
 * @interface DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings
 */
export interface DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings {
    /**
     * 
     * @type {DocsVisionWebAdminConsoleApplicationSettingsEnvironmentSettings}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings
     */
    'environment'?: DocsVisionWebAdminConsoleApplicationSettingsEnvironmentSettings;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleApplicationSettingsSystemSettings}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings
     */
    'system'?: DocsVisionWebAdminConsoleApplicationSettingsSystemSettings;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleApplicationSettingsViewSettings}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings
     */
    'view'?: DocsVisionWebAdminConsoleApplicationSettingsViewSettings;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleApplicationSettingsSettingsServiceSettings}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings
     */
    'settingsService'?: DocsVisionWebAdminConsoleApplicationSettingsSettingsServiceSettings;
    /**
     * Gets or sets extensions list
     * @type {Array<DocsVisionWebAdminConsoleApplicationSettingsExtensionLoadingInfo>}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings
     */
    'extensionsLoadingInfo'?: Array<DocsVisionWebAdminConsoleApplicationSettingsExtensionLoadingInfo> | null;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleApplicationSettingsCultureSettings}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings
     */
    'culture'?: DocsVisionWebAdminConsoleApplicationSettingsCultureSettings;
    /**
     * Available locales
     * @type {Array<DocsVisionWebAdminConsoleApplicationSettingsLocale>}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings
     */
    'availableLocales'?: Array<DocsVisionWebAdminConsoleApplicationSettingsLocale> | null;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleApplicationSettingsUserModel}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings
     */
    'user'?: DocsVisionWebAdminConsoleApplicationSettingsUserModel;
}
/**
 * Represents culture setting
 * @export
 * @interface DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
 */
export interface DocsVisionWebAdminConsoleApplicationSettingsCultureSettings {
    /**
     * Gets or sets name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
     */
    'name'?: string | null;
    /**
     * Gets or sets twoLetterISOLanguageName
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
     */
    'twoLetterISOLanguageName'?: string | null;
    /**
     * Gets or sets NumberDecimalSeparator
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
     */
    'numberDecimalSeparator'?: string | null;
    /**
     * Gets or sets NumberGroupSeparator
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
     */
    'numberGroupSeparator'?: string | null;
    /**
     * Gets or sets PercentDecimalDigits
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
     */
    'percentDecimalDigits'?: number;
    /**
     * Gets or sets LongTimePattern
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
     */
    'longTimePattern'?: string | null;
    /**
     * Gets or sets LongDatePattern
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
     */
    'longDatePattern'?: string | null;
    /**
     * Gets or sets FullDateTimePattern
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
     */
    'fullDateTimePattern'?: string | null;
    /**
     * Gets or sets ShortDatePattern
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
     */
    'shortDatePattern'?: string | null;
    /**
     * Gets or sets ShortTimePattern
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
     */
    'shortTimePattern'?: string | null;
    /**
     * 
     * @type {SystemDayOfWeek}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsCultureSettings
     */
    'firstDayOfWeek'?: SystemDayOfWeek;
}


/**
 * Represents environment settings
 * @export
 * @interface DocsVisionWebAdminConsoleApplicationSettingsEnvironmentSettings
 */
export interface DocsVisionWebAdminConsoleApplicationSettingsEnvironmentSettings {
    /**
     * Gets or sets application path
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsEnvironmentSettings
     */
    'applicationPath'?: string | null;
    /**
     * Gets or sets application startup timestamp
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsEnvironmentSettings
     */
    'applicationTimestamp'?: number;
    /**
     * Gets or sets application name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsEnvironmentSettings
     */
    'applicationName'?: string | null;
}
/**
 * Represents extension info
 * @export
 * @interface DocsVisionWebAdminConsoleApplicationSettingsExtensionLoadingInfo
 */
export interface DocsVisionWebAdminConsoleApplicationSettingsExtensionLoadingInfo {
    /**
     * Gets or sets is extension enabled
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsExtensionLoadingInfo
     */
    'enabled'?: boolean;
    /**
     * Gets or sets extension folder name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsExtensionLoadingInfo
     */
    'folderName'?: string | null;
    /**
     * Gets or sets extension sorting order
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsExtensionLoadingInfo
     */
    'order'?: number;
}
/**
 * Represents locale setting
 * @export
 * @interface DocsVisionWebAdminConsoleApplicationSettingsLocale
 */
export interface DocsVisionWebAdminConsoleApplicationSettingsLocale {
    /**
     * Gets or sets LCID
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsLocale
     */
    'lcid'?: number;
    /**
     * Gets or sets culture name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsLocale
     */
    'name'?: string | null;
    /**
     * Gets or sets display name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsLocale
     */
    'displayName'?: string | null;
    /**
     * Gets or sets icon file name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsLocale
     */
    'iconFileName'?: string | null;
}
/**
 * Represents settings service settings
 * @export
 * @interface DocsVisionWebAdminConsoleApplicationSettingsSettingsServiceSettings
 */
export interface DocsVisionWebAdminConsoleApplicationSettingsSettingsServiceSettings {
    /**
     * Gets or sets connect address part of connection string
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsSettingsServiceSettings
     */
    'connectAddress'?: string | null;
}
/**
 * Represents system settings
 * @export
 * @interface DocsVisionWebAdminConsoleApplicationSettingsSystemSettings
 */
export interface DocsVisionWebAdminConsoleApplicationSettingsSystemSettings {
    /**
     * Gets or sets log level
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsSystemSettings
     */
    'logLevel'?: number;
}
/**
 * Represents user model
 * @export
 * @interface DocsVisionWebAdminConsoleApplicationSettingsUserModel
 */
export interface DocsVisionWebAdminConsoleApplicationSettingsUserModel {
    /**
     * Gets or sets user account name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsUserModel
     */
    'accountName'?: string | null;
    /**
     * Gets or sets user display name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsUserModel
     */
    'displayName'?: string | null;
}
/**
 * Represents view settings
 * @export
 * @interface DocsVisionWebAdminConsoleApplicationSettingsViewSettings
 */
export interface DocsVisionWebAdminConsoleApplicationSettingsViewSettings {
    /**
     * Gets or sets page size
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleApplicationSettingsViewSettings
     */
    'pageSize'?: number;
}
/**
 * Represents database connection model
 * @export
 * @interface DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel
 */
export interface DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel {
    /**
     * Gets or sets DocsVision connection identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel
     */
    'id'?: string;
    /**
     * Gets or sets DocsVision connection  display name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel
     */
    'displayName'?: string | null;
    /**
     * Gets or sets value indicating whether connection is default
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel
     */
    'defaultConnection'?: boolean;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseEngineType}
     * @memberof DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel
     */
    'engineType'?: DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseEngineType;
    /**
     * Gets or sets connection string
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel
     */
    'connectionString'?: string | null;
    /**
     * Gets or sets flag indicating whether password is not empty
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel
     */
    'passwordNotEmpty'?: boolean;
}


/**
 * Represents DocsVision database connection information
 * @export
 * @interface DocsVisionWebAdminConsoleDvCreateDvConnectionModel
 */
export interface DocsVisionWebAdminConsoleDvCreateDvConnectionModel {
    /**
     * Gets or sets DocsVision connection identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvCreateDvConnectionModel
     */
    'id'?: string;
    /**
     * Gets or sets DocsVision connection  display name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvCreateDvConnectionModel
     */
    'displayName'?: string | null;
    /**
     * Gets or sets value indicating whether connection is default
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleDvCreateDvConnectionModel
     */
    'defaultConnection'?: boolean;
    /**
     * Gets or sets connect address
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvCreateDvConnectionModel
     */
    'connectAddress'?: string | null;
    /**
     * Gets or sets database alias
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvCreateDvConnectionModel
     */
    'database'?: string | null;
    /**
     * Gets or sets user login
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvCreateDvConnectionModel
     */
    'login'?: string | null;
    /**
     * Gets or sets user password
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvCreateDvConnectionModel
     */
    'password'?: string | null;
}
/**
 * Represents DocsVision connection model
 * @export
 * @interface DocsVisionWebAdminConsoleDvDvConnectionModel
 */
export interface DocsVisionWebAdminConsoleDvDvConnectionModel {
    /**
     * Gets or sets DocsVision connection identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvDvConnectionModel
     */
    'id'?: string;
    /**
     * Gets or sets DocsVision connection  display name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvDvConnectionModel
     */
    'displayName'?: string | null;
    /**
     * Gets or sets value indicating whether connection is default
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleDvDvConnectionModel
     */
    'defaultConnection'?: boolean;
    /**
     * Gets or sets connect address
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvDvConnectionModel
     */
    'connectAddress'?: string | null;
    /**
     * Gets or sets database alias
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvDvConnectionModel
     */
    'database'?: string | null;
    /**
     * Gets or sets user login
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvDvConnectionModel
     */
    'login'?: string | null;
    /**
     * Gets or sets flag indicating whether password is not empty
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleDvDvConnectionModel
     */
    'passwordNotEmpty'?: boolean;
}
/**
 * Represents DocsVision update database connection information
 * @export
 * @interface DocsVisionWebAdminConsoleDvUpdateDvConnectionModel
 */
export interface DocsVisionWebAdminConsoleDvUpdateDvConnectionModel {
    /**
     * Gets or sets DocsVision connection identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvUpdateDvConnectionModel
     */
    'id'?: string;
    /**
     * Gets or sets DocsVision connection  display name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvUpdateDvConnectionModel
     */
    'displayName'?: string | null;
    /**
     * Gets or sets value indicating whether connection is default
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleDvUpdateDvConnectionModel
     */
    'defaultConnection'?: boolean;
    /**
     * Gets or sets connect address
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvUpdateDvConnectionModel
     */
    'connectAddress'?: string | null;
    /**
     * Gets or sets database alias
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvUpdateDvConnectionModel
     */
    'database'?: string | null;
    /**
     * Gets or sets user login
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvUpdateDvConnectionModel
     */
    'login'?: string | null;
    /**
     * Gets or sets user password
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleDvUpdateDvConnectionModel
     */
    'password'?: string | null;
    /**
     * Gets or sets value indicating whether password changed
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleDvUpdateDvConnectionModel
     */
    'passwordChanged'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DocsVisionWebAdminConsoleInstancesProcessArchitecture = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebAdminConsoleInstancesProcessArchitecture = typeof DocsVisionWebAdminConsoleInstancesProcessArchitecture[keyof typeof DocsVisionWebAdminConsoleInstancesProcessArchitecture];


/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection
 */
export interface DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection
     */
    'displayName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection
     */
    'defaultConnection'?: boolean;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseEngineType}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection
     */
    'engineType'?: DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseEngineType;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection
     */
    'connectionType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection
     */
    'connectionString'?: string | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseEngineType = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseEngineType = typeof DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseEngineType[keyof typeof DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseEngineType];


/**
 * 
 * @export
 * @enum {string}
 */

export const DocsVisionWebAdminConsoleLogicConnectionsMailAuthenticationType = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebAdminConsoleLogicConnectionsMailAuthenticationType = typeof DocsVisionWebAdminConsoleLogicConnectionsMailAuthenticationType[keyof typeof DocsVisionWebAdminConsoleLogicConnectionsMailAuthenticationType];


/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleLogicConnectionsMailExchangeSettings
 */
export interface DocsVisionWebAdminConsoleLogicConnectionsMailExchangeSettings {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailExchangeSettings
     */
    'profile'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailExchangeSettings
     */
    'serverAddress'?: string | null;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings
 */
export interface DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings
     */
    'serverAddress'?: string | null;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailAuthenticationType}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings
     */
    'authenticationType'?: DocsVisionWebAdminConsoleLogicConnectionsMailAuthenticationType;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailWebServiceVersion}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings
     */
    'webServiceVersion'?: DocsVisionWebAdminConsoleLogicConnectionsMailWebServiceVersion;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings
     */
    'webAutodiscoverURL'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings
     */
    'webUserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings
     */
    'webPassword'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings
     */
    'webPasswordChanged'?: boolean;
}


/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection
 */
export interface DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection
     */
    'displayName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection
     */
    'defaultConnection'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection
     */
    'connectionType'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection
     */
    'useDefault'?: boolean;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailServerType}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection
     */
    'serverType'?: DocsVisionWebAdminConsoleLogicConnectionsMailServerType;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailExchangeSettings}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection
     */
    'exchangeSettings'?: DocsVisionWebAdminConsoleLogicConnectionsMailExchangeSettings;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection
     */
    'smtpSettings'?: DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection
     */
    'exchangeWebServicesSettings'?: DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DocsVisionWebAdminConsoleLogicConnectionsMailSMTPAuthenticationType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebAdminConsoleLogicConnectionsMailSMTPAuthenticationType = typeof DocsVisionWebAdminConsoleLogicConnectionsMailSMTPAuthenticationType[keyof typeof DocsVisionWebAdminConsoleLogicConnectionsMailSMTPAuthenticationType];


/**
 * 
 * @export
 * @enum {string}
 */

export const DocsVisionWebAdminConsoleLogicConnectionsMailSMTPSendUsing = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebAdminConsoleLogicConnectionsMailSMTPSendUsing = typeof DocsVisionWebAdminConsoleLogicConnectionsMailSMTPSendUsing[keyof typeof DocsVisionWebAdminConsoleLogicConnectionsMailSMTPSendUsing];


/**
 * 
 * @export
 * @enum {string}
 */

export const DocsVisionWebAdminConsoleLogicConnectionsMailServerType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebAdminConsoleLogicConnectionsMailServerType = typeof DocsVisionWebAdminConsoleLogicConnectionsMailServerType[keyof typeof DocsVisionWebAdminConsoleLogicConnectionsMailServerType];


/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
 */
export interface DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings {
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailSMTPSendUsing}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'smtpSendUsing'?: DocsVisionWebAdminConsoleLogicConnectionsMailSMTPSendUsing;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'serverAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'smtpServer'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'smtpPort'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'smtpTimeout'?: number;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailSMTPAuthenticationType}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'smtpAuthenticationType'?: DocsVisionWebAdminConsoleLogicConnectionsMailSMTPAuthenticationType;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'smtpUserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'smtpPassword'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'smtpPasswordChanged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'smtpUseSsl'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'poP3Server'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'poP3Port'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'poP3Timeout'?: number;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailAuthenticationType}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'poP3AuthenticationType'?: DocsVisionWebAdminConsoleLogicConnectionsMailAuthenticationType;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'poP3UserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'poP3Password'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'poP3PasswordChanged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings
     */
    'poP3UseSsl'?: boolean;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DocsVisionWebAdminConsoleLogicConnectionsMailWebServiceVersion = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebAdminConsoleLogicConnectionsMailWebServiceVersion = typeof DocsVisionWebAdminConsoleLogicConnectionsMailWebServiceVersion[keyof typeof DocsVisionWebAdminConsoleLogicConnectionsMailWebServiceVersion];


/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleLogicExtensionInfo
 */
export interface DocsVisionWebAdminConsoleLogicExtensionInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicExtensionInfo
     */
    'extensionName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicExtensionInfo
     */
    'version'?: string | null;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleLogicWidgetsDashboard
 */
export interface DocsVisionWebAdminConsoleLogicWidgetsDashboard {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsDashboard
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsDashboard
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration
 */
export interface DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration {
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicWidgetsDashboard}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration
     */
    'dashboard'?: DocsVisionWebAdminConsoleLogicWidgetsDashboard;
    /**
     * 
     * @type {Array<DocsVisionWebAdminConsoleLogicWidgetsWidget>}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration
     */
    'widgets'?: Array<DocsVisionWebAdminConsoleLogicWidgetsWidget> | null;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleLogicWidgetsWidget
 */
export interface DocsVisionWebAdminConsoleLogicWidgetsWidget {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsWidget
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsWidget
     */
    'typeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsWidget
     */
    'version'?: string | null;
    /**
     * 
     * @type {Array<DocsVisionWebAdminConsoleLogicWidgetsWidgetSetting>}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsWidget
     */
    'settings'?: Array<DocsVisionWebAdminConsoleLogicWidgetsWidgetSetting> | null;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleLogicWidgetsWidgetSetting
 */
export interface DocsVisionWebAdminConsoleLogicWidgetsWidgetSetting {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsWidgetSetting
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsWidgetSetting
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange
 */
export interface DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange {
    /**
     * 
     * @type {Array<DocsVisionWebAdminConsoleLogicWidgetsWidgetSetting>}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange
     */
    'settings'?: Array<DocsVisionWebAdminConsoleLogicWidgetsWidgetSetting> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange
     */
    'removedSettings'?: Array<string> | null;
}
/**
 * Represents mail server connection model
 * @export
 * @interface DocsVisionWebAdminConsoleMailMailConnectionModel
 */
export interface DocsVisionWebAdminConsoleMailMailConnectionModel {
    /**
     * Gets or sets DocsVision connection identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleMailMailConnectionModel
     */
    'id'?: string;
    /**
     * Gets or sets DocsVision connection  display name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleMailMailConnectionModel
     */
    'displayName'?: string | null;
    /**
     * Gets or sets value indicating whether connection is default
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleMailMailConnectionModel
     */
    'defaultConnection'?: boolean;
    /**
     * Gets or sets value indicating whether to use default settings
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleMailMailConnectionModel
     */
    'useDefault'?: boolean;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailServerType}
     * @memberof DocsVisionWebAdminConsoleMailMailConnectionModel
     */
    'serverType'?: DocsVisionWebAdminConsoleLogicConnectionsMailServerType;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailExchangeSettings}
     * @memberof DocsVisionWebAdminConsoleMailMailConnectionModel
     */
    'exchangeSettings'?: DocsVisionWebAdminConsoleLogicConnectionsMailExchangeSettings;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings}
     * @memberof DocsVisionWebAdminConsoleMailMailConnectionModel
     */
    'smtpSettings'?: DocsVisionWebAdminConsoleLogicConnectionsMailSmtpSettings;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings}
     * @memberof DocsVisionWebAdminConsoleMailMailConnectionModel
     */
    'exchangeWebServicesSettings'?: DocsVisionWebAdminConsoleLogicConnectionsMailExchangeWebServicesSettings;
}


/**
 * Represents incoming message state
 * @export
 * @enum {string}
 */

export const DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState = typeof DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState[keyof typeof DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState];


/**
 * Настройки сортировки данных
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition {
    /**
     * Псевдоним колонки
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition
     */
    'columnName'?: string | null;
    /**
     * Направление сортировки
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition
     */
    'ascending'?: boolean;
    /**
     * Порядок сортировки
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition
     */
    'order'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo {
    /**
     * Gets or sets card identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo
     */
    'cardId'?: string;
    /**
     * Gets or sets card type identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo
     */
    'cardTypeId'?: string;
    /**
     * Gets or sets value indicating whether card is found
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo
     */
    'cardFound'?: boolean;
    /**
     * Gets or sets value indicating whether card supports messages
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo
     */
    'messagesSupported'?: boolean;
    /**
     * Gets or sets card digest
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo
     */
    'description'?: string | null;
    /**
     * Целевой сервис обработки
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo
     */
    'targetService'?: string | null;
    /**
     * Gets or sets card type description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo
     */
    'cardTypeDescription'?: string | null;
    /**
     * Gets or sets card kind identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo
     */
    'cardKindId'?: string;
    /**
     * Gets or sets card kind description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo
     */
    'cardKindDescription'?: string | null;
}
/**
 * Represents card incoming messages statistics
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesStatistics
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesStatistics {
    /**
     * Gets or sets value indicating whether card is found
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesStatistics
     */
    'cardFound'?: boolean;
    /**
     * Gets or sets value indicating whether card supports messages
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesStatistics
     */
    'messagesSupported'?: boolean;
    /**
     * Gets or sets handled messages count
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesStatistics
     */
    'handledMessagesCount'?: number;
    /**
     * Gets or sets unhandled messages count
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesStatistics
     */
    'unhandledMessagesCount'?: number;
    /**
     * Gets or sets messages in error and failed state count
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesStatistics
     */
    'errorMessagesCount'?: number;
    /**
     * Gets or sets count of messages that have any WaitingLocks
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesStatistics
     */
    'blockedMessagesCount'?: number;
    /**
     * Gets or sets paused messages count
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesStatistics
     */
    'pausedMessagesCount'?: number;
}
/**
 * Информация о текущей открытой (выбранной) карточке
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo {
    /**
     * Gets or sets card identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
     */
    'cardId'?: string;
    /**
     * Gets or sets card type identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
     */
    'cardTypeId'?: string;
    /**
     * Gets or sets value indicating whether card is found
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
     */
    'cardFound'?: boolean;
    /**
     * Gets or sets value indicating whether card supports messages
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
     */
    'messagesSupported'?: boolean;
    /**
     * Gets or sets card digest
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
     */
    'description'?: string | null;
    /**
     * Целевой сервис обработки
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
     */
    'targetService'?: string | null;
    /**
     * Входящие ссылки
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
     */
    'incomingReferences'?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference> | null;
    /**
     * Исходящие ссылки
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
     */
    'outgoingReferences'?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference> | null;
    /**
     * Gets or sets card type description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
     */
    'cardTypeDescription'?: string | null;
    /**
     * Gets or sets card kind identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
     */
    'cardKindId'?: string;
    /**
     * Gets or sets card kind description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo
     */
    'cardKindDescription'?: string | null;
}
/**
 * Incoming message data
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfo
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfo {
    /**
     * Service type ID
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfo
     */
    'typeId'?: string;
    /**
     * Service type name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfo
     */
    'typeDescription'?: string | null;
    /**
     * Count of unhandled messages
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfo
     */
    'unhandledCount'?: number;
    /**
     * Count of handled messages
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfo
     */
    'handledCount'?: number;
    /**
     * Count of messages with error
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfo
     */
    'errorCount'?: number;
    /**
     * Count of messages with waiting locks
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfo
     */
    'hasWaitingLocksCount'?: number;
    /**
     * Count of paused messages
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfo
     */
    'pausedCount'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageDetailsInfo
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageDetailsInfo {
    /**
     * 
     * @type {DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageDetailsInfo
     */
    'messageProperties'?: DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo;
    /**
     * 
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfo>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageDetailsInfo
     */
    'waitingLocks'?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfo> | null;
    /**
     * 
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItem>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageDetailsInfo
     */
    'logItems'?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItem> | null;
}
/**
 * Represents incoming message information
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo {
    /**
     * Gets or sets message identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'id'?: string;
    /**
     * Gets or sets messages card identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'messageCardId'?: string;
    /**
     * Gets or sets message creation date
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'createDate'?: string;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'state'?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState;
    /**
     * Gets or sets type identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'typeId'?: string;
    /**
     * Gets or sets type description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'typeIdDescription'?: string | null;
    /**
     * Gets or sets aubtype identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'subTypeId'?: string;
    /**
     * Gets or sets aubtype description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'subTypeIdDescription'?: string | null;
    /**
     * Gets or sets message data
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'data'?: string | null;
    /**
     * Gets or sets message data description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'dataDescription'?: string | null;
    /**
     * Gets or sets value indicating whether message has errors
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'hasErrors'?: boolean;
    /**
     * Gets or sets value indicating whether message has WaitingLocks
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'hasWaitingLocks'?: boolean;
    /**
     * Gets or sets object identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'objectId'?: string;
    /**
     * Gets or sets object card type identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'objectTypeId'?: string;
    /**
     * Gets or sets object description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'objectDescription'?: string | null;
    /**
     * Gets or sets own card description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo
     */
    'description'?: string | null;
}


/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfo
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfo {
    /**
     * Gets or sets row identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfo
     */
    'id'?: string;
    /**
     * Gets or sets locking object identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfo
     */
    'objectId'?: string;
    /**
     * Gets or sets object description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfo
     */
    'objectDescription'?: string | null;
    /**
     * Gets or sets wait begin datetime
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfo
     */
    'waitBeginDate'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItem
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItem {
    /**
     * Gets or sets log item row identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItem
     */
    'id'?: string;
    /**
     * Get or sets log message date
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItem
     */
    'date'?: string;
    /**
     * Get or sets log message
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItem
     */
    'message'?: string | null;
    /**
     * Get or sets log message
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItem
     */
    'shortMessage'?: string | null;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfo
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfo
     */
    'typeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfo
     */
    'typeDescription'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfo
     */
    'messagesCount'?: number;
}
/**
 * Represents outgoing message information
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo {
    /**
     * Gets or sets message identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'id'?: string;
    /**
     * Gets or sets messages card identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'messageCardId'?: string;
    /**
     * Gets or sets message creation date
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'createDate'?: string;
    /**
     * Gets or sets type identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'typeId'?: string;
    /**
     * Gets or sets type description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'typeIdDescription'?: string | null;
    /**
     * Gets or sets aubtype identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'subTypeId'?: string;
    /**
     * Gets or sets aubtype description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'subTypeIdDescription'?: string | null;
    /**
     * Gets or sets message data
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'data'?: string | null;
    /**
     * Gets or sets message data description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'dataDescription'?: string | null;
    /**
     * Gets or sets value indicating whether message send delayed
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'delayed'?: boolean;
    /**
     * Gets or sets sending delayed till date
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'delayedTill'?: string | null;
    /**
     * Gets or sets object identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'objectId'?: string;
    /**
     * Gets or sets object card type identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'objectTypeId'?: string;
    /**
     * Gets or sets object description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'objectDescription'?: string | null;
    /**
     * Gets or sets own card description
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo
     */
    'description'?: string | null;
}
/**
 * Paginated data
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfoCustomWebService
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfoCustomWebService {
    /**
     * Data page content
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfo>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfoCustomWebService
     */
    'items'?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfo> | null;
    /**
     * Presence of unloaded pages
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfoCustomWebService
     */
    'hasMore'?: boolean;
    /**
     * Total count of items on all pages
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfoCustomWebService
     */
    'totalItemsCount'?: number;
    /**
     * View cursor ID
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfoCustomWebService
     */
    'cursorId'?: string | null;
}
/**
 * Paginated data
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService {
    /**
     * Data page content
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService
     */
    'items'?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo> | null;
    /**
     * Presence of unloaded pages
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService
     */
    'hasMore'?: boolean;
    /**
     * Total count of items on all pages
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService
     */
    'totalItemsCount'?: number;
    /**
     * View cursor ID
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService
     */
    'cursorId'?: string | null;
}
/**
 * Paginated data
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfoCustomWebService
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfoCustomWebService {
    /**
     * Data page content
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfo>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfoCustomWebService
     */
    'items'?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfo> | null;
    /**
     * Presence of unloaded pages
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfoCustomWebService
     */
    'hasMore'?: boolean;
    /**
     * Total count of items on all pages
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfoCustomWebService
     */
    'totalItemsCount'?: number;
    /**
     * View cursor ID
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfoCustomWebService
     */
    'cursorId'?: string | null;
}
/**
 * Paginated data
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItemCustomWebService
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItemCustomWebService {
    /**
     * Data page content
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItem>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItemCustomWebService
     */
    'items'?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItem> | null;
    /**
     * Presence of unloaded pages
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItemCustomWebService
     */
    'hasMore'?: boolean;
    /**
     * Total count of items on all pages
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItemCustomWebService
     */
    'totalItemsCount'?: number;
    /**
     * View cursor ID
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItemCustomWebService
     */
    'cursorId'?: string | null;
}
/**
 * Paginated data
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfoCustomWebService
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfoCustomWebService {
    /**
     * Data page content
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfo>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfoCustomWebService
     */
    'items'?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfo> | null;
    /**
     * Presence of unloaded pages
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfoCustomWebService
     */
    'hasMore'?: boolean;
    /**
     * Total count of items on all pages
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfoCustomWebService
     */
    'totalItemsCount'?: number;
    /**
     * View cursor ID
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfoCustomWebService
     */
    'cursorId'?: string | null;
}
/**
 * Paginated data
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService {
    /**
     * Data page content
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService
     */
    'items'?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfo> | null;
    /**
     * Presence of unloaded pages
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService
     */
    'hasMore'?: boolean;
    /**
     * Total count of items on all pages
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService
     */
    'totalItemsCount'?: number;
    /**
     * View cursor ID
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService
     */
    'cursorId'?: string | null;
}
/**
 * Paginated data
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReferenceCustomWebService
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReferenceCustomWebService {
    /**
     * Data page content
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReferenceCustomWebService
     */
    'items'?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference> | null;
    /**
     * Presence of unloaded pages
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReferenceCustomWebService
     */
    'hasMore'?: boolean;
    /**
     * Total count of items on all pages
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReferenceCustomWebService
     */
    'totalItemsCount'?: number;
    /**
     * View cursor ID
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReferenceCustomWebService
     */
    'cursorId'?: string | null;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference {
    /**
     * Gets or sets card identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference
     */
    'cardId'?: string;
    /**
     * Gets or sets card description (digest)
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference
     */
    'description'?: string | null;
    /**
     * Gets or sets sign of support for messages by the card
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference
     */
    'messagesSupported'?: boolean;
    /**
     * Gets or sets date of creation referenced card
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReference
     */
    'createDate'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesViewDistinctValuesDistinctValue
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesViewDistinctValuesDistinctValue {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesViewDistinctValuesDistinctValue
     */
    'displayName'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesViewDistinctValuesDistinctValue
     */
    'value'?: any | null;
}
/**
 * Represents worker instance model
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesWorkerInstanceAndConfigModel
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesWorkerInstanceAndConfigModel {
    /**
     * 
     * @type {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerInstanceModel}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesWorkerInstanceAndConfigModel
     */
    'instance'?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerInstanceModel;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesWorkerInstanceAndConfigModel
     */
    'configuration'?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel;
    /**
     * 
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationType>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesWorkerInstanceAndConfigModel
     */
    'configurationTypes'?: Array<DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationType> | null;
}
/**
 * Represents process configuration
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {DocsVisionWebAdminConsoleInstancesProcessArchitecture}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel
     */
    'architecture'?: DocsVisionWebAdminConsoleInstancesProcessArchitecture;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel
     */
    'disabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel
     */
    'shutdownTimeout'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel
     */
    'configurationType'?: string | null;
    /**
     * 
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConnectionConfiguration>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel
     */
    'connections'?: Array<DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConnectionConfiguration> | null;
}


/**
 * Represents configuration type
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationType
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationType {
    /**
     * Gets or sets configuration type
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationType
     */
    'configurationType'?: string | null;
    /**
     * Gets or sets display name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationType
     */
    'displayName'?: string | null;
    /**
     * Gets or sets configuration connection types colection
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsRequiredConnectionType>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationType
     */
    'connectionTypes'?: Array<DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsRequiredConnectionType> | null;
}
/**
 * Represents connection configuration
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConnectionConfiguration
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConnectionConfiguration {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConnectionConfiguration
     */
    'linkId'?: string;
    /**
     * Gets or sets connection type alias
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConnectionConfiguration
     */
    'connectionTypeAlias'?: string | null;
    /**
     * Gets or sets connection
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConnectionConfiguration
     */
    'connectionName'?: string | null;
}
/**
 * 
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsRequiredConnectionType
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsRequiredConnectionType {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsRequiredConnectionType
     */
    'linkId'?: string;
    /**
     * Gets or sets connection type
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsRequiredConnectionType
     */
    'connectionType'?: string | null;
    /**
     * Gets or sets configuration connection display name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsRequiredConnectionType
     */
    'displayName'?: string | null;
}
/**
 * Represents worker node configuration
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel {
    /**
     * Gets or sets node configuration identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel
     */
    'id'?: string;
    /**
     * Gets or sets log file path
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel
     */
    'logFile'?: string | null;
    /**
     * 
     * @type {SystemDiagnosticsTraceLevel}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel
     */
    'traceLevel'?: SystemDiagnosticsTraceLevel;
    /**
     * Gets process configurations
     * @type {Array<DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel>}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel
     */
    'processConfigurations'?: Array<DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel> | null;
}


/**
 * Represents worker service instance information
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerInstanceModel
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerInstanceModel {
    /**
     * Gets or sets worker instance identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerInstanceModel
     */
    'id'?: string;
    /**
     * Gets or sets machine name
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerInstanceModel
     */
    'machineName'?: string | null;
    /**
     * Gets or sets REST api address
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerInstanceModel
     */
    'restApiAddress'?: string | null;
    /**
     * 
     * @type {SystemVersion}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerInstanceModel
     */
    'version'?: SystemVersion;
}
/**
 * Represents worker node settings (part of worker configuration)
 * @export
 * @interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel
 */
export interface DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel {
    /**
     * Gets or sets node configuration identifier
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel
     */
    'id'?: string;
    /**
     * Gets or sets log file path
     * @type {string}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel
     */
    'logFile'?: string | null;
    /**
     * 
     * @type {SystemDiagnosticsTraceLevel}
     * @memberof DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel
     */
    'traceLevel'?: SystemDiagnosticsTraceLevel;
}


/**
 * 
 * @export
 * @interface MicrosoftAspNetCoreMvcProblemDetails
 */
export interface MicrosoftAspNetCoreMvcProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SystemDayOfWeek = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type SystemDayOfWeek = typeof SystemDayOfWeek[keyof typeof SystemDayOfWeek];


/**
 * 
 * @export
 * @enum {string}
 */

export const SystemDiagnosticsTraceLevel = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type SystemDiagnosticsTraceLevel = typeof SystemDiagnosticsTraceLevel[keyof typeof SystemDiagnosticsTraceLevel];


/**
 * 
 * @export
 * @interface SystemVersion
 */
export interface SystemVersion {
    /**
     * 
     * @type {number}
     * @memberof SystemVersion
     */
    'major'?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemVersion
     */
    'minor'?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemVersion
     */
    'build'?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemVersion
     */
    'revision'?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemVersion
     */
    'majorRevision'?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemVersion
     */
    'minorRevision'?: number;
}

/**
 * AboutApi - axios parameter creator
 * @export
 */
export const AboutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets about information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAboutGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/About`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AboutApi - functional programming interface
 * @export
 */
export const AboutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AboutApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets about information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAboutGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleAboutAboutInformation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAboutGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AboutApi - factory interface
 * @export
 */
export const AboutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AboutApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets about information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAboutGet(options?: any): AxiosPromise<DocsVisionWebAdminConsoleAboutAboutInformation> {
            return localVarFp.apiAboutGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AboutApi - object-oriented interface
 * @export
 * @class AboutApi
 * @extends {BaseAPI}
 */
export class AboutApi extends BaseAPI {
    /**
     * 
     * @summary Gets about information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutApi
     */
    public apiAboutGet(options?: AxiosRequestConfig) {
        return AboutApiFp(this.configuration).apiAboutGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AllMessagesApi - axios parameter creator
 * @export
 */
export const AllMessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming/all?page=1
         * @summary Get incoming messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdIncomingAllGet: async (dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiAllMessagesDvConnectionIdIncomingAllGet', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/AllMessages/{dvConnectionId}/incoming/all`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginDate !== undefined) {
                localVarQueryParameter['BeginDate'] = (beginDate as any instanceof Date) ?
                    (beginDate as any).toISOString() :
                    beginDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (typeID !== undefined) {
                localVarQueryParameter['TypeID'] = typeID;
            }

            if (hasWaitingLocks !== undefined) {
                localVarQueryParameter['HasWaitingLocks'] = hasWaitingLocks;
            }

            if (cursorId !== undefined) {
                localVarQueryParameter['CursorId'] = cursorId;
            }

            if (sort) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get incoming messages using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdIncomingGet: async (dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiAllMessagesDvConnectionIdIncomingGet', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/AllMessages/{dvConnectionId}/incoming`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginDate !== undefined) {
                localVarQueryParameter['BeginDate'] = (beginDate as any instanceof Date) ?
                    (beginDate as any).toISOString() :
                    beginDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (typeID !== undefined) {
                localVarQueryParameter['TypeID'] = typeID;
            }

            if (hasWaitingLocks !== undefined) {
                localVarQueryParameter['HasWaitingLocks'] = hasWaitingLocks;
            }

            if (cursorId !== undefined) {
                localVarQueryParameter['CursorId'] = cursorId;
            }

            if (sort) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming/stats/all?page=1
         * @summary Get incoming messages statistic
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdIncomingStatsAllGet: async (dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiAllMessagesDvConnectionIdIncomingStatsAllGet', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/AllMessages/{dvConnectionId}/incoming/stats/all`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginDate !== undefined) {
                localVarQueryParameter['BeginDate'] = (beginDate as any instanceof Date) ?
                    (beginDate as any).toISOString() :
                    beginDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (typeID !== undefined) {
                localVarQueryParameter['TypeID'] = typeID;
            }

            if (hasWaitingLocks !== undefined) {
                localVarQueryParameter['HasWaitingLocks'] = hasWaitingLocks;
            }

            if (cursorId !== undefined) {
                localVarQueryParameter['CursorId'] = cursorId;
            }

            if (sort) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming/stats?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get incoming messages statistic using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdIncomingStatsGet: async (dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiAllMessagesDvConnectionIdIncomingStatsGet', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/AllMessages/{dvConnectionId}/incoming/stats`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginDate !== undefined) {
                localVarQueryParameter['BeginDate'] = (beginDate as any instanceof Date) ?
                    (beginDate as any).toISOString() :
                    beginDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (typeID !== undefined) {
                localVarQueryParameter['TypeID'] = typeID;
            }

            if (hasWaitingLocks !== undefined) {
                localVarQueryParameter['HasWaitingLocks'] = hasWaitingLocks;
            }

            if (cursorId !== undefined) {
                localVarQueryParameter['CursorId'] = cursorId;
            }

            if (sort) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing/all?page=1
         * @summary Get outgoing messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdOutgoingAllGet: async (dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiAllMessagesDvConnectionIdOutgoingAllGet', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/AllMessages/{dvConnectionId}/outgoing/all`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginDate !== undefined) {
                localVarQueryParameter['BeginDate'] = (beginDate as any instanceof Date) ?
                    (beginDate as any).toISOString() :
                    beginDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (typeID !== undefined) {
                localVarQueryParameter['TypeID'] = typeID;
            }

            if (hasWaitingLocks !== undefined) {
                localVarQueryParameter['HasWaitingLocks'] = hasWaitingLocks;
            }

            if (cursorId !== undefined) {
                localVarQueryParameter['CursorId'] = cursorId;
            }

            if (sort) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get outgoing messages using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdOutgoingGet: async (dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiAllMessagesDvConnectionIdOutgoingGet', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/AllMessages/{dvConnectionId}/outgoing`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginDate !== undefined) {
                localVarQueryParameter['BeginDate'] = (beginDate as any instanceof Date) ?
                    (beginDate as any).toISOString() :
                    beginDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (typeID !== undefined) {
                localVarQueryParameter['TypeID'] = typeID;
            }

            if (hasWaitingLocks !== undefined) {
                localVarQueryParameter['HasWaitingLocks'] = hasWaitingLocks;
            }

            if (cursorId !== undefined) {
                localVarQueryParameter['CursorId'] = cursorId;
            }

            if (sort) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing/stats/all?page=1
         * @summary Get outgoing messages statistic
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdOutgoingStatsAllGet: async (dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiAllMessagesDvConnectionIdOutgoingStatsAllGet', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/AllMessages/{dvConnectionId}/outgoing/stats/all`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginDate !== undefined) {
                localVarQueryParameter['BeginDate'] = (beginDate as any instanceof Date) ?
                    (beginDate as any).toISOString() :
                    beginDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (typeID !== undefined) {
                localVarQueryParameter['TypeID'] = typeID;
            }

            if (hasWaitingLocks !== undefined) {
                localVarQueryParameter['HasWaitingLocks'] = hasWaitingLocks;
            }

            if (cursorId !== undefined) {
                localVarQueryParameter['CursorId'] = cursorId;
            }

            if (sort) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing/stats?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get outgoing messages statistic using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdOutgoingStatsGet: async (dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiAllMessagesDvConnectionIdOutgoingStatsGet', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/AllMessages/{dvConnectionId}/outgoing/stats`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginDate !== undefined) {
                localVarQueryParameter['BeginDate'] = (beginDate as any instanceof Date) ?
                    (beginDate as any).toISOString() :
                    beginDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (typeID !== undefined) {
                localVarQueryParameter['TypeID'] = typeID;
            }

            if (hasWaitingLocks !== undefined) {
                localVarQueryParameter['HasWaitingLocks'] = hasWaitingLocks;
            }

            if (cursorId !== undefined) {
                localVarQueryParameter['CursorId'] = cursorId;
            }

            if (sort) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/viewDistinctValues?cursorId=FD24A029-6B51-4245-BB31-06719F9FE068&field=State&field=TypeID
         * @summary Get distinct values of view
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [cursorId] 
         * @param {Array<string>} [field] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdViewDistinctValuesGet: async (dvConnectionId: string, cursorId?: string, field?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiAllMessagesDvConnectionIdViewDistinctValuesGet', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/AllMessages/{dvConnectionId}/viewDistinctValues`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursorId !== undefined) {
                localVarQueryParameter['CursorId'] = cursorId;
            }

            if (field) {
                localVarQueryParameter['Field'] = field;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AllMessagesApi - functional programming interface
 * @export
 */
export const AllMessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AllMessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming/all?page=1
         * @summary Get incoming messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAllMessagesDvConnectionIdIncomingAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAllMessagesDvConnectionIdIncomingAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get incoming messages using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAllMessagesDvConnectionIdIncomingGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAllMessagesDvConnectionIdIncomingGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming/stats/all?page=1
         * @summary Get incoming messages statistic
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAllMessagesDvConnectionIdIncomingStatsAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfoCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAllMessagesDvConnectionIdIncomingStatsAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming/stats?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get incoming messages statistic using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAllMessagesDvConnectionIdIncomingStatsGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfoCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAllMessagesDvConnectionIdIncomingStatsGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing/all?page=1
         * @summary Get outgoing messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAllMessagesDvConnectionIdOutgoingAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAllMessagesDvConnectionIdOutgoingAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get outgoing messages using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAllMessagesDvConnectionIdOutgoingGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAllMessagesDvConnectionIdOutgoingGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing/stats/all?page=1
         * @summary Get outgoing messages statistic
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAllMessagesDvConnectionIdOutgoingStatsAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfoCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAllMessagesDvConnectionIdOutgoingStatsAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing/stats?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get outgoing messages statistic using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAllMessagesDvConnectionIdOutgoingStatsGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfoCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAllMessagesDvConnectionIdOutgoingStatsGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/viewDistinctValues?cursorId=FD24A029-6B51-4245-BB31-06719F9FE068&field=State&field=TypeID
         * @summary Get distinct values of view
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [cursorId] 
         * @param {Array<string>} [field] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAllMessagesDvConnectionIdViewDistinctValuesGet(dvConnectionId: string, cursorId?: string, field?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesViewDistinctValuesDistinctValue>; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAllMessagesDvConnectionIdViewDistinctValuesGet(dvConnectionId, cursorId, field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AllMessagesApi - factory interface
 * @export
 */
export const AllMessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AllMessagesApiFp(configuration)
    return {
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming/all?page=1
         * @summary Get incoming messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdIncomingAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService> {
            return localVarFp.apiAllMessagesDvConnectionIdIncomingAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get incoming messages using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdIncomingGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService> {
            return localVarFp.apiAllMessagesDvConnectionIdIncomingGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming/stats/all?page=1
         * @summary Get incoming messages statistic
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdIncomingStatsAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfoCustomWebService> {
            return localVarFp.apiAllMessagesDvConnectionIdIncomingStatsAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/incoming/stats?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get incoming messages statistic using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdIncomingStatsGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingByServiceTypeInfoCustomWebService> {
            return localVarFp.apiAllMessagesDvConnectionIdIncomingStatsGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing/all?page=1
         * @summary Get outgoing messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdOutgoingAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService> {
            return localVarFp.apiAllMessagesDvConnectionIdOutgoingAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get outgoing messages using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdOutgoingGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService> {
            return localVarFp.apiAllMessagesDvConnectionIdOutgoingGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing/stats/all?page=1
         * @summary Get outgoing messages statistic
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdOutgoingStatsAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfoCustomWebService> {
            return localVarFp.apiAllMessagesDvConnectionIdOutgoingStatsAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/outgoing/stats?beginDate=10.10.2021&endDate=21.11.2021&page=1
         * @summary Get outgoing messages statistic using a filter
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdOutgoingStatsGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingByServiceTypeInfoCustomWebService> {
            return localVarFp.apiAllMessagesDvConnectionIdOutgoingStatsGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/allmessages/dvConnectionId/viewDistinctValues?cursorId=FD24A029-6B51-4245-BB31-06719F9FE068&field=State&field=TypeID
         * @summary Get distinct values of view
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} [cursorId] 
         * @param {Array<string>} [field] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAllMessagesDvConnectionIdViewDistinctValuesGet(dvConnectionId: string, cursorId?: string, field?: Array<string>, options?: any): AxiosPromise<{ [key: string]: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesViewDistinctValuesDistinctValue>; }> {
            return localVarFp.apiAllMessagesDvConnectionIdViewDistinctValuesGet(dvConnectionId, cursorId, field, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AllMessagesApi - object-oriented interface
 * @export
 * @class AllMessagesApi
 * @extends {BaseAPI}
 */
export class AllMessagesApi extends BaseAPI {
    /**
     * Sample request:        GET api/allmessages/dvConnectionId/incoming/all?page=1
     * @summary Get incoming messages
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} [beginDate] Минимальная дата создания сообщения
     * @param {string} [endDate] Максимальная дата сообщения
     * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
     * @param {string} [typeID] Идентификатор типа сообщения
     * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
     * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
     * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllMessagesApi
     */
    public apiAllMessagesDvConnectionIdIncomingAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AllMessagesApiFp(this.configuration).apiAllMessagesDvConnectionIdIncomingAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/allmessages/dvConnectionId/incoming?beginDate=10.10.2021&endDate=21.11.2021&page=1
     * @summary Get incoming messages using a filter
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} [beginDate] Минимальная дата создания сообщения
     * @param {string} [endDate] Максимальная дата сообщения
     * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
     * @param {string} [typeID] Идентификатор типа сообщения
     * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
     * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
     * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllMessagesApi
     */
    public apiAllMessagesDvConnectionIdIncomingGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AllMessagesApiFp(this.configuration).apiAllMessagesDvConnectionIdIncomingGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/allmessages/dvConnectionId/incoming/stats/all?page=1
     * @summary Get incoming messages statistic
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} [beginDate] Минимальная дата создания сообщения
     * @param {string} [endDate] Максимальная дата сообщения
     * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
     * @param {string} [typeID] Идентификатор типа сообщения
     * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
     * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
     * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllMessagesApi
     */
    public apiAllMessagesDvConnectionIdIncomingStatsAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AllMessagesApiFp(this.configuration).apiAllMessagesDvConnectionIdIncomingStatsAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/allmessages/dvConnectionId/incoming/stats?beginDate=10.10.2021&endDate=21.11.2021&page=1
     * @summary Get incoming messages statistic using a filter
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} [beginDate] Минимальная дата создания сообщения
     * @param {string} [endDate] Максимальная дата сообщения
     * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
     * @param {string} [typeID] Идентификатор типа сообщения
     * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
     * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
     * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllMessagesApi
     */
    public apiAllMessagesDvConnectionIdIncomingStatsGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AllMessagesApiFp(this.configuration).apiAllMessagesDvConnectionIdIncomingStatsGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/allmessages/dvConnectionId/outgoing/all?page=1
     * @summary Get outgoing messages
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} [beginDate] Минимальная дата создания сообщения
     * @param {string} [endDate] Максимальная дата сообщения
     * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
     * @param {string} [typeID] Идентификатор типа сообщения
     * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
     * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
     * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllMessagesApi
     */
    public apiAllMessagesDvConnectionIdOutgoingAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AllMessagesApiFp(this.configuration).apiAllMessagesDvConnectionIdOutgoingAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/allmessages/dvConnectionId/outgoing?beginDate=10.10.2021&endDate=21.11.2021&page=1
     * @summary Get outgoing messages using a filter
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} [beginDate] Минимальная дата создания сообщения
     * @param {string} [endDate] Максимальная дата сообщения
     * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
     * @param {string} [typeID] Идентификатор типа сообщения
     * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
     * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
     * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllMessagesApi
     */
    public apiAllMessagesDvConnectionIdOutgoingGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AllMessagesApiFp(this.configuration).apiAllMessagesDvConnectionIdOutgoingGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/allmessages/dvConnectionId/outgoing/stats/all?page=1
     * @summary Get outgoing messages statistic
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} [beginDate] Минимальная дата создания сообщения
     * @param {string} [endDate] Максимальная дата сообщения
     * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
     * @param {string} [typeID] Идентификатор типа сообщения
     * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
     * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
     * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllMessagesApi
     */
    public apiAllMessagesDvConnectionIdOutgoingStatsAllGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AllMessagesApiFp(this.configuration).apiAllMessagesDvConnectionIdOutgoingStatsAllGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/allmessages/dvConnectionId/outgoing/stats?beginDate=10.10.2021&endDate=21.11.2021&page=1
     * @summary Get outgoing messages statistic using a filter
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} [beginDate] Минимальная дата создания сообщения
     * @param {string} [endDate] Максимальная дата сообщения
     * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
     * @param {string} [typeID] Идентификатор типа сообщения
     * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
     * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
     * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllMessagesApi
     */
    public apiAllMessagesDvConnectionIdOutgoingStatsGet(dvConnectionId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AllMessagesApiFp(this.configuration).apiAllMessagesDvConnectionIdOutgoingStatsGet(dvConnectionId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/allmessages/dvConnectionId/viewDistinctValues?cursorId=FD24A029-6B51-4245-BB31-06719F9FE068&field=State&field=TypeID
     * @summary Get distinct values of view
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} [cursorId] 
     * @param {Array<string>} [field] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllMessagesApi
     */
    public apiAllMessagesDvConnectionIdViewDistinctValuesGet(dvConnectionId: string, cursorId?: string, field?: Array<string>, options?: AxiosRequestConfig) {
        return AllMessagesApiFp(this.configuration).apiAllMessagesDvConnectionIdViewDistinctValuesGet(dvConnectionId, cursorId, field, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ApplicationSettingsApi - axios parameter creator
 * @export
 */
export const ApplicationSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the application settings associated with the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApplicationSettingsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApplicationSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationSettingsApi - functional programming interface
 * @export
 */
export const ApplicationSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the application settings associated with the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApplicationSettingsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApplicationSettingsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicationSettingsApi - factory interface
 * @export
 */
export const ApplicationSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationSettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the application settings associated with the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApplicationSettingsGet(options?: any): AxiosPromise<DocsVisionWebAdminConsoleApplicationSettingsApplicationSettings> {
            return localVarFp.apiApplicationSettingsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationSettingsApi - object-oriented interface
 * @export
 * @class ApplicationSettingsApi
 * @extends {BaseAPI}
 */
export class ApplicationSettingsApi extends BaseAPI {
    /**
     * 
     * @summary Returns the application settings associated with the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationSettingsApi
     */
    public apiApplicationSettingsGet(options?: AxiosRequestConfig) {
        return ApplicationSettingsApiFp(this.configuration).apiApplicationSettingsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardMessagesApi - axios parameter creator
 * @export
 */
export const CardMessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/childrefs?page=1
         * @summary Get outgoing card hard references (child references)
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdChildrefsGet: async (dvConnectionId: string, cardId: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdChildrefsGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdChildrefsGet', 'cardId', cardId)
            const localVarPath = `/api/CardMessages/{dvConnectionId}/{cardId}/childrefs`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/incoming?page=1
         * @summary Get incoming messages from card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdIncomingGet: async (dvConnectionId: string, cardId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdIncomingGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdIncomingGet', 'cardId', cardId)
            const localVarPath = `/api/CardMessages/{dvConnectionId}/{cardId}/incoming`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginDate !== undefined) {
                localVarQueryParameter['BeginDate'] = (beginDate as any instanceof Date) ?
                    (beginDate as any).toISOString() :
                    beginDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (typeID !== undefined) {
                localVarQueryParameter['TypeID'] = typeID;
            }

            if (hasWaitingLocks !== undefined) {
                localVarQueryParameter['HasWaitingLocks'] = hasWaitingLocks;
            }

            if (cursorId !== undefined) {
                localVarQueryParameter['CursorId'] = cursorId;
            }

            if (sort) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/info
         * @summary Get information about card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdInfoGet: async (dvConnectionId: string, cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdInfoGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdInfoGet', 'cardId', cardId)
            const localVarPath = `/api/CardMessages/{dvConnectionId}/{cardId}/info`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/outgoing?page=1
         * @summary Get outgoing messages from card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdOutgoingGet: async (dvConnectionId: string, cardId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdOutgoingGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdOutgoingGet', 'cardId', cardId)
            const localVarPath = `/api/CardMessages/{dvConnectionId}/{cardId}/outgoing`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beginDate !== undefined) {
                localVarQueryParameter['BeginDate'] = (beginDate as any instanceof Date) ?
                    (beginDate as any).toISOString() :
                    beginDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (typeID !== undefined) {
                localVarQueryParameter['TypeID'] = typeID;
            }

            if (hasWaitingLocks !== undefined) {
                localVarQueryParameter['HasWaitingLocks'] = hasWaitingLocks;
            }

            if (cursorId !== undefined) {
                localVarQueryParameter['CursorId'] = cursorId;
            }

            if (sort) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/parentrefs?page=1
         * @summary Get incoming card hard references (parent references)
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdParentrefsGet: async (dvConnectionId: string, cardId: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdParentrefsGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdParentrefsGet', 'cardId', cardId)
            const localVarPath = `/api/CardMessages/{dvConnectionId}/{cardId}/parentrefs`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/refs
         * @summary Get card references
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdRefsGet: async (dvConnectionId: string, cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdRefsGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdRefsGet', 'cardId', cardId)
            const localVarPath = `/api/CardMessages/{dvConnectionId}/{cardId}/refs`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/stats
         * @summary Get statistic by card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdStatsGet: async (dvConnectionId: string, cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdStatsGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('apiCardMessagesDvConnectionIdCardIdStatsGet', 'cardId', cardId)
            const localVarPath = `/api/CardMessages/{dvConnectionId}/{cardId}/stats`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/cardmessages
         * @summary Get test message of controller
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CardMessages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardMessagesApi - functional programming interface
 * @export
 */
export const CardMessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardMessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/childrefs?page=1
         * @summary Get outgoing card hard references (child references)
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCardMessagesDvConnectionIdCardIdChildrefsGet(dvConnectionId: string, cardId: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReferenceCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCardMessagesDvConnectionIdCardIdChildrefsGet(dvConnectionId, cardId, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/incoming?page=1
         * @summary Get incoming messages from card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCardMessagesDvConnectionIdCardIdIncomingGet(dvConnectionId: string, cardId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCardMessagesDvConnectionIdCardIdIncomingGet(dvConnectionId, cardId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/info
         * @summary Get information about card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCardMessagesDvConnectionIdCardIdInfoGet(dvConnectionId: string, cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCardMessagesDvConnectionIdCardIdInfoGet(dvConnectionId, cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/outgoing?page=1
         * @summary Get outgoing messages from card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCardMessagesDvConnectionIdCardIdOutgoingGet(dvConnectionId: string, cardId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCardMessagesDvConnectionIdCardIdOutgoingGet(dvConnectionId, cardId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/parentrefs?page=1
         * @summary Get incoming card hard references (parent references)
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCardMessagesDvConnectionIdCardIdParentrefsGet(dvConnectionId: string, cardId: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReferenceCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCardMessagesDvConnectionIdCardIdParentrefsGet(dvConnectionId, cardId, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/refs
         * @summary Get card references
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCardMessagesDvConnectionIdCardIdRefsGet(dvConnectionId: string, cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCardMessagesDvConnectionIdCardIdRefsGet(dvConnectionId, cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/stats
         * @summary Get statistic by card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCardMessagesDvConnectionIdCardIdStatsGet(dvConnectionId: string, cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCardMessagesDvConnectionIdCardIdStatsGet(dvConnectionId, cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/cardmessages
         * @summary Get test message of controller
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCardMessagesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCardMessagesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardMessagesApi - factory interface
 * @export
 */
export const CardMessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardMessagesApiFp(configuration)
    return {
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/childrefs?page=1
         * @summary Get outgoing card hard references (child references)
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdChildrefsGet(dvConnectionId: string, cardId: string, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReferenceCustomWebService> {
            return localVarFp.apiCardMessagesDvConnectionIdCardIdChildrefsGet(dvConnectionId, cardId, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/incoming?page=1
         * @summary Get incoming messages from card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdIncomingGet(dvConnectionId: string, cardId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfoCustomWebService> {
            return localVarFp.apiCardMessagesDvConnectionIdCardIdIncomingGet(dvConnectionId, cardId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/info
         * @summary Get information about card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdInfoGet(dvConnectionId: string, cardId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesInfo> {
            return localVarFp.apiCardMessagesDvConnectionIdCardIdInfoGet(dvConnectionId, cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/outgoing?page=1
         * @summary Get outgoing messages from card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {string} [beginDate] Минимальная дата создания сообщения
         * @param {string} [endDate] Максимальная дата сообщения
         * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
         * @param {string} [typeID] Идентификатор типа сообщения
         * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
         * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
         * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdOutgoingGet(dvConnectionId: string, cardId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesOutgoingMessageInfoCustomWebService> {
            return localVarFp.apiCardMessagesDvConnectionIdCardIdOutgoingGet(dvConnectionId, cardId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/parentrefs?page=1
         * @summary Get incoming card hard references (parent references)
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdParentrefsGet(dvConnectionId: string, cardId: string, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesReferenceCustomWebService> {
            return localVarFp.apiCardMessagesDvConnectionIdCardIdParentrefsGet(dvConnectionId, cardId, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/refs
         * @summary Get card references
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdRefsGet(dvConnectionId: string, cardId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardReferencesInfo> {
            return localVarFp.apiCardMessagesDvConnectionIdCardIdRefsGet(dvConnectionId, cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/cardmessages/dvConnectionId/cardId/stats
         * @summary Get statistic by card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} cardId Card messages ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesDvConnectionIdCardIdStatsGet(dvConnectionId: string, cardId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesCardMessagesStatistics> {
            return localVarFp.apiCardMessagesDvConnectionIdCardIdStatsGet(dvConnectionId, cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/cardmessages
         * @summary Get test message of controller
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardMessagesGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiCardMessagesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardMessagesApi - object-oriented interface
 * @export
 * @class CardMessagesApi
 * @extends {BaseAPI}
 */
export class CardMessagesApi extends BaseAPI {
    /**
     * Sample request:        GET api/cardmessages/dvConnectionId/cardId/childrefs?page=1
     * @summary Get outgoing card hard references (child references)
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} cardId Card ID
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardMessagesApi
     */
    public apiCardMessagesDvConnectionIdCardIdChildrefsGet(dvConnectionId: string, cardId: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return CardMessagesApiFp(this.configuration).apiCardMessagesDvConnectionIdCardIdChildrefsGet(dvConnectionId, cardId, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/cardmessages/dvConnectionId/cardId/incoming?page=1
     * @summary Get incoming messages from card messages
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} cardId Card messages ID
     * @param {string} [beginDate] Минимальная дата создания сообщения
     * @param {string} [endDate] Максимальная дата сообщения
     * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
     * @param {string} [typeID] Идентификатор типа сообщения
     * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
     * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
     * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardMessagesApi
     */
    public apiCardMessagesDvConnectionIdCardIdIncomingGet(dvConnectionId: string, cardId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return CardMessagesApiFp(this.configuration).apiCardMessagesDvConnectionIdCardIdIncomingGet(dvConnectionId, cardId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/cardmessages/dvConnectionId/cardId/info
     * @summary Get information about card messages
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} cardId Card messages ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardMessagesApi
     */
    public apiCardMessagesDvConnectionIdCardIdInfoGet(dvConnectionId: string, cardId: string, options?: AxiosRequestConfig) {
        return CardMessagesApiFp(this.configuration).apiCardMessagesDvConnectionIdCardIdInfoGet(dvConnectionId, cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/cardmessages/dvConnectionId/cardId/outgoing?page=1
     * @summary Get outgoing messages from card messages
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} cardId Card messages ID
     * @param {string} [beginDate] Минимальная дата создания сообщения
     * @param {string} [endDate] Максимальная дата сообщения
     * @param {DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState} [state] Состояние сообщения
     * @param {string} [typeID] Идентификатор типа сообщения
     * @param {boolean} [hasWaitingLocks] Наличие блокировки у сообщения
     * @param {string} [cursorId] Идентификатор курсора на действующее представление с фильтром
     * @param {Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>} [sort] Правила сортировки возвращаемых
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardMessagesApi
     */
    public apiCardMessagesDvConnectionIdCardIdOutgoingGet(dvConnectionId: string, cardId: string, beginDate?: string, endDate?: string, state?: DocsVisionWebAdminConsoleWorkerExtensionDataIncomingMessageState, typeID?: string, hasWaitingLocks?: boolean, cursorId?: string, sort?: Array<DocsVisionWebAdminConsoleWorkerExtensionModelsRequestsRequestsSortingCondition>, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return CardMessagesApiFp(this.configuration).apiCardMessagesDvConnectionIdCardIdOutgoingGet(dvConnectionId, cardId, beginDate, endDate, state, typeID, hasWaitingLocks, cursorId, sort, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/cardmessages/dvConnectionId/cardId/parentrefs?page=1
     * @summary Get incoming card hard references (parent references)
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} cardId Card ID
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardMessagesApi
     */
    public apiCardMessagesDvConnectionIdCardIdParentrefsGet(dvConnectionId: string, cardId: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return CardMessagesApiFp(this.configuration).apiCardMessagesDvConnectionIdCardIdParentrefsGet(dvConnectionId, cardId, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/cardmessages/dvConnectionId/cardId/refs
     * @summary Get card references
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} cardId Card ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardMessagesApi
     */
    public apiCardMessagesDvConnectionIdCardIdRefsGet(dvConnectionId: string, cardId: string, options?: AxiosRequestConfig) {
        return CardMessagesApiFp(this.configuration).apiCardMessagesDvConnectionIdCardIdRefsGet(dvConnectionId, cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/cardmessages/dvConnectionId/cardId/stats
     * @summary Get statistic by card messages
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} cardId Card messages ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardMessagesApi
     */
    public apiCardMessagesDvConnectionIdCardIdStatsGet(dvConnectionId: string, cardId: string, options?: AxiosRequestConfig) {
        return CardMessagesApiFp(this.configuration).apiCardMessagesDvConnectionIdCardIdStatsGet(dvConnectionId, cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/cardmessages
     * @summary Get test message of controller
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardMessagesApi
     */
    public apiCardMessagesGet(options?: AxiosRequestConfig) {
        return CardMessagesApiFp(this.configuration).apiCardMessagesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardUrlApi - axios parameter creator
 * @export
 */
export const CardUrlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} dvConnectionId 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardUrlDvConnectionIdCardIdWebclientGet: async (dvConnectionId: string, cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiCardUrlDvConnectionIdCardIdWebclientGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('apiCardUrlDvConnectionIdCardIdWebclientGet', 'cardId', cardId)
            const localVarPath = `/api/CardUrl/{dvConnectionId}/{cardId}/webclient`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} dvConnectionId 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardUrlDvConnectionIdCardIdWindowsclientGet: async (dvConnectionId: string, cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiCardUrlDvConnectionIdCardIdWindowsclientGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('apiCardUrlDvConnectionIdCardIdWindowsclientGet', 'cardId', cardId)
            const localVarPath = `/api/CardUrl/{dvConnectionId}/{cardId}/windowsclient`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardUrlApi - functional programming interface
 * @export
 */
export const CardUrlApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardUrlApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} dvConnectionId 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCardUrlDvConnectionIdCardIdWebclientGet(dvConnectionId: string, cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCardUrlDvConnectionIdCardIdWebclientGet(dvConnectionId, cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} dvConnectionId 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCardUrlDvConnectionIdCardIdWindowsclientGet(dvConnectionId: string, cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCardUrlDvConnectionIdCardIdWindowsclientGet(dvConnectionId, cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardUrlApi - factory interface
 * @export
 */
export const CardUrlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardUrlApiFp(configuration)
    return {
        /**
         * 
         * @param {string} dvConnectionId 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardUrlDvConnectionIdCardIdWebclientGet(dvConnectionId: string, cardId: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiCardUrlDvConnectionIdCardIdWebclientGet(dvConnectionId, cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} dvConnectionId 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCardUrlDvConnectionIdCardIdWindowsclientGet(dvConnectionId: string, cardId: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiCardUrlDvConnectionIdCardIdWindowsclientGet(dvConnectionId, cardId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardUrlApi - object-oriented interface
 * @export
 * @class CardUrlApi
 * @extends {BaseAPI}
 */
export class CardUrlApi extends BaseAPI {
    /**
     * 
     * @param {string} dvConnectionId 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardUrlApi
     */
    public apiCardUrlDvConnectionIdCardIdWebclientGet(dvConnectionId: string, cardId: string, options?: AxiosRequestConfig) {
        return CardUrlApiFp(this.configuration).apiCardUrlDvConnectionIdCardIdWebclientGet(dvConnectionId, cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} dvConnectionId 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardUrlApi
     */
    public apiCardUrlDvConnectionIdCardIdWindowsclientGet(dvConnectionId: string, cardId: string, options?: AxiosRequestConfig) {
        return CardUrlApiFp(this.configuration).apiCardUrlDvConnectionIdCardIdWindowsclientGet(dvConnectionId, cardId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DashboardConfigurationsApi - axios parameter creator
 * @export
 */
export const DashboardConfigurationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET api/DashboardConfigurations/dashboardId
         * @summary Gets dashboard configuration by dashboard identifier
         * @param {string} dashboardId Dashboard identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardConfigurationsDashboardIdGet: async (dashboardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('apiDashboardConfigurationsDashboardIdGet', 'dashboardId', dashboardId)
            const localVarPath = `/api/DashboardConfigurations/{dashboardId}`
                .replace(`{${"dashboardId"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST api/dashboards
         * @summary Adds dashboard configuration
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration} [docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration] Dashboard configuration being created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardConfigurationsPost: async (docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration?: DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DashboardConfigurations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT api/dashboards
         * @summary Adds or updates dashboard configuration
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration} [docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration] Changes of Dashboard configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardConfigurationsPut: async (docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration?: DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DashboardConfigurations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardConfigurationsApi - functional programming interface
 * @export
 */
export const DashboardConfigurationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardConfigurationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Sample request:        GET api/DashboardConfigurations/dashboardId
         * @summary Gets dashboard configuration by dashboard identifier
         * @param {string} dashboardId Dashboard identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardConfigurationsDashboardIdGet(dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardConfigurationsDashboardIdGet(dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        POST api/dashboards
         * @summary Adds dashboard configuration
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration} [docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration] Dashboard configuration being created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardConfigurationsPost(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration?: DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardConfigurationsPost(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        PUT api/dashboards
         * @summary Adds or updates dashboard configuration
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration} [docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration] Changes of Dashboard configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardConfigurationsPut(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration?: DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardConfigurationsPut(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardConfigurationsApi - factory interface
 * @export
 */
export const DashboardConfigurationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardConfigurationsApiFp(configuration)
    return {
        /**
         * Sample request:        GET api/DashboardConfigurations/dashboardId
         * @summary Gets dashboard configuration by dashboard identifier
         * @param {string} dashboardId Dashboard identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardConfigurationsDashboardIdGet(dashboardId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration> {
            return localVarFp.apiDashboardConfigurationsDashboardIdGet(dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        POST api/dashboards
         * @summary Adds dashboard configuration
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration} [docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration] Dashboard configuration being created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardConfigurationsPost(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration?: DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options?: any): AxiosPromise<void> {
            return localVarFp.apiDashboardConfigurationsPost(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        PUT api/dashboards
         * @summary Adds or updates dashboard configuration
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration} [docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration] Changes of Dashboard configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardConfigurationsPut(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration?: DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options?: any): AxiosPromise<void> {
            return localVarFp.apiDashboardConfigurationsPut(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardConfigurationsApi - object-oriented interface
 * @export
 * @class DashboardConfigurationsApi
 * @extends {BaseAPI}
 */
export class DashboardConfigurationsApi extends BaseAPI {
    /**
     * Sample request:        GET api/DashboardConfigurations/dashboardId
     * @summary Gets dashboard configuration by dashboard identifier
     * @param {string} dashboardId Dashboard identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardConfigurationsApi
     */
    public apiDashboardConfigurationsDashboardIdGet(dashboardId: string, options?: AxiosRequestConfig) {
        return DashboardConfigurationsApiFp(this.configuration).apiDashboardConfigurationsDashboardIdGet(dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        POST api/dashboards
     * @summary Adds dashboard configuration
     * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration} [docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration] Dashboard configuration being created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardConfigurationsApi
     */
    public apiDashboardConfigurationsPost(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration?: DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options?: AxiosRequestConfig) {
        return DashboardConfigurationsApiFp(this.configuration).apiDashboardConfigurationsPost(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        PUT api/dashboards
     * @summary Adds or updates dashboard configuration
     * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration} [docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration] Changes of Dashboard configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardConfigurationsApi
     */
    public apiDashboardConfigurationsPut(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration?: DocsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options?: AxiosRequestConfig) {
        return DashboardConfigurationsApiFp(this.configuration).apiDashboardConfigurationsPut(docsVisionWebAdminConsoleLogicWidgetsDashboardConfiguration, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DashboardsApi - axios parameter creator
 * @export
 */
export const DashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets dashboards list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes dashboard by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDashboardsIdDelete', 'id', id)
            const localVarPath = `/api/Dashboards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets dashboard by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDashboardsIdGet', 'id', id)
            const localVarPath = `/api/Dashboards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds dashboard
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboard} [docsVisionWebAdminConsoleLogicWidgetsDashboard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsPost: async (docsVisionWebAdminConsoleLogicWidgetsDashboard?: DocsVisionWebAdminConsoleLogicWidgetsDashboard, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleLogicWidgetsDashboard, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edits dashboard
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboard} [docsVisionWebAdminConsoleLogicWidgetsDashboard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsPut: async (docsVisionWebAdminConsoleLogicWidgetsDashboard?: DocsVisionWebAdminConsoleLogicWidgetsDashboard, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleLogicWidgetsDashboard, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardsApi - functional programming interface
 * @export
 */
export const DashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets dashboards list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebAdminConsoleLogicWidgetsDashboard>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes dashboard by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets dashboard by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleLogicWidgetsDashboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds dashboard
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboard} [docsVisionWebAdminConsoleLogicWidgetsDashboard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsPost(docsVisionWebAdminConsoleLogicWidgetsDashboard?: DocsVisionWebAdminConsoleLogicWidgetsDashboard, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsPost(docsVisionWebAdminConsoleLogicWidgetsDashboard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edits dashboard
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboard} [docsVisionWebAdminConsoleLogicWidgetsDashboard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDashboardsPut(docsVisionWebAdminConsoleLogicWidgetsDashboard?: DocsVisionWebAdminConsoleLogicWidgetsDashboard, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDashboardsPut(docsVisionWebAdminConsoleLogicWidgetsDashboard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardsApi - factory interface
 * @export
 */
export const DashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardsApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets dashboards list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsGet(options?: any): AxiosPromise<Array<DocsVisionWebAdminConsoleLogicWidgetsDashboard>> {
            return localVarFp.apiDashboardsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes dashboard by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiDashboardsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets dashboard by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsIdGet(id: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleLogicWidgetsDashboard> {
            return localVarFp.apiDashboardsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds dashboard
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboard} [docsVisionWebAdminConsoleLogicWidgetsDashboard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsPost(docsVisionWebAdminConsoleLogicWidgetsDashboard?: DocsVisionWebAdminConsoleLogicWidgetsDashboard, options?: any): AxiosPromise<void> {
            return localVarFp.apiDashboardsPost(docsVisionWebAdminConsoleLogicWidgetsDashboard, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edits dashboard
         * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboard} [docsVisionWebAdminConsoleLogicWidgetsDashboard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDashboardsPut(docsVisionWebAdminConsoleLogicWidgetsDashboard?: DocsVisionWebAdminConsoleLogicWidgetsDashboard, options?: any): AxiosPromise<void> {
            return localVarFp.apiDashboardsPut(docsVisionWebAdminConsoleLogicWidgetsDashboard, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardsApi - object-oriented interface
 * @export
 * @class DashboardsApi
 * @extends {BaseAPI}
 */
export class DashboardsApi extends BaseAPI {
    /**
     * 
     * @summary Gets dashboards list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public apiDashboardsGet(options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes dashboard by identifier
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public apiDashboardsIdDelete(id: string, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets dashboard by identifier
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public apiDashboardsIdGet(id: string, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds dashboard
     * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboard} [docsVisionWebAdminConsoleLogicWidgetsDashboard] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public apiDashboardsPost(docsVisionWebAdminConsoleLogicWidgetsDashboard?: DocsVisionWebAdminConsoleLogicWidgetsDashboard, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsPost(docsVisionWebAdminConsoleLogicWidgetsDashboard, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edits dashboard
     * @param {DocsVisionWebAdminConsoleLogicWidgetsDashboard} [docsVisionWebAdminConsoleLogicWidgetsDashboard] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public apiDashboardsPut(docsVisionWebAdminConsoleLogicWidgetsDashboard?: DocsVisionWebAdminConsoleLogicWidgetsDashboard, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).apiDashboardsPut(docsVisionWebAdminConsoleLogicWidgetsDashboard, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DatabaseConnectionsApi - axios parameter creator
 * @export
 */
export const DatabaseConnectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE api/databaseconnections/dvConnectionId
         * @summary Deletes database connection by identifier
         * @param {string} dvConnectionId Connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDatabaseConnectionsDvConnectionIdDelete: async (dvConnectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiDatabaseConnectionsDvConnectionIdDelete', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/DatabaseConnections/{dvConnectionId}`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/databaseconnections/dvConnectionId
         * @summary Gets database connection by identifier
         * @param {string} dvConnectionId Connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDatabaseConnectionsDvConnectionIdGet: async (dvConnectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiDatabaseConnectionsDvConnectionIdGet', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/DatabaseConnections/{dvConnectionId}`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/databaseconnections
         * @summary Gets database connections list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDatabaseConnectionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DatabaseConnections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST api/databaseconnections
         * @summary Adds database connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection} [docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDatabaseConnectionsPost: async (docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection?: DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DatabaseConnections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT api/databaseconnections
         * @summary Edits database connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection} [docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDatabaseConnectionsPut: async (docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection?: DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DatabaseConnections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabaseConnectionsApi - functional programming interface
 * @export
 */
export const DatabaseConnectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatabaseConnectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Sample request:        DELETE api/databaseconnections/dvConnectionId
         * @summary Deletes database connection by identifier
         * @param {string} dvConnectionId Connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDatabaseConnectionsDvConnectionIdDelete(dvConnectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDatabaseConnectionsDvConnectionIdDelete(dvConnectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/databaseconnections/dvConnectionId
         * @summary Gets database connection by identifier
         * @param {string} dvConnectionId Connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDatabaseConnectionsDvConnectionIdGet(dvConnectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDatabaseConnectionsDvConnectionIdGet(dvConnectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/databaseconnections
         * @summary Gets database connections list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDatabaseConnectionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDatabaseConnectionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        POST api/databaseconnections
         * @summary Adds database connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection} [docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDatabaseConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection?: DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDatabaseConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        PUT api/databaseconnections
         * @summary Edits database connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection} [docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDatabaseConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection?: DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDatabaseConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatabaseConnectionsApi - factory interface
 * @export
 */
export const DatabaseConnectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatabaseConnectionsApiFp(configuration)
    return {
        /**
         * Sample request:        DELETE api/databaseconnections/dvConnectionId
         * @summary Deletes database connection by identifier
         * @param {string} dvConnectionId Connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDatabaseConnectionsDvConnectionIdDelete(dvConnectionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiDatabaseConnectionsDvConnectionIdDelete(dvConnectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/databaseconnections/dvConnectionId
         * @summary Gets database connection by identifier
         * @param {string} dvConnectionId Connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDatabaseConnectionsDvConnectionIdGet(dvConnectionId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel> {
            return localVarFp.apiDatabaseConnectionsDvConnectionIdGet(dvConnectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/databaseconnections
         * @summary Gets database connections list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDatabaseConnectionsGet(options?: any): AxiosPromise<Array<DocsVisionWebAdminConsoleDatabaseDatabaseConnectionModel>> {
            return localVarFp.apiDatabaseConnectionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        POST api/databaseconnections
         * @summary Adds database connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection} [docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDatabaseConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection?: DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options?: any): AxiosPromise<void> {
            return localVarFp.apiDatabaseConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        PUT api/databaseconnections
         * @summary Edits database connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection} [docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDatabaseConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection?: DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options?: any): AxiosPromise<void> {
            return localVarFp.apiDatabaseConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatabaseConnectionsApi - object-oriented interface
 * @export
 * @class DatabaseConnectionsApi
 * @extends {BaseAPI}
 */
export class DatabaseConnectionsApi extends BaseAPI {
    /**
     * Sample request:        DELETE api/databaseconnections/dvConnectionId
     * @summary Deletes database connection by identifier
     * @param {string} dvConnectionId Connection ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseConnectionsApi
     */
    public apiDatabaseConnectionsDvConnectionIdDelete(dvConnectionId: string, options?: AxiosRequestConfig) {
        return DatabaseConnectionsApiFp(this.configuration).apiDatabaseConnectionsDvConnectionIdDelete(dvConnectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/databaseconnections/dvConnectionId
     * @summary Gets database connection by identifier
     * @param {string} dvConnectionId Connection ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseConnectionsApi
     */
    public apiDatabaseConnectionsDvConnectionIdGet(dvConnectionId: string, options?: AxiosRequestConfig) {
        return DatabaseConnectionsApiFp(this.configuration).apiDatabaseConnectionsDvConnectionIdGet(dvConnectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/databaseconnections
     * @summary Gets database connections list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseConnectionsApi
     */
    public apiDatabaseConnectionsGet(options?: AxiosRequestConfig) {
        return DatabaseConnectionsApiFp(this.configuration).apiDatabaseConnectionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        POST api/databaseconnections
     * @summary Adds database connection
     * @param {DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection} [docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseConnectionsApi
     */
    public apiDatabaseConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection?: DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options?: AxiosRequestConfig) {
        return DatabaseConnectionsApiFp(this.configuration).apiDatabaseConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        PUT api/databaseconnections
     * @summary Edits database connection
     * @param {DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection} [docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseConnectionsApi
     */
    public apiDatabaseConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection?: DocsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options?: AxiosRequestConfig) {
        return DatabaseConnectionsApiFp(this.configuration).apiDatabaseConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsDatabaseDatabaseConnection, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DiagnosticApi - axios parameter creator
 * @export
 */
export const DiagnosticApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET api/Diagnostic
         * @summary Get application launch time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDiagnosticGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Diagnostic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiagnosticApi - functional programming interface
 * @export
 */
export const DiagnosticApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DiagnosticApiAxiosParamCreator(configuration)
    return {
        /**
         * Sample request:        GET api/Diagnostic
         * @summary Get application launch time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDiagnosticGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDiagnosticGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DiagnosticApi - factory interface
 * @export
 */
export const DiagnosticApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DiagnosticApiFp(configuration)
    return {
        /**
         * Sample request:        GET api/Diagnostic
         * @summary Get application launch time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDiagnosticGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiDiagnosticGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DiagnosticApi - object-oriented interface
 * @export
 * @class DiagnosticApi
 * @extends {BaseAPI}
 */
export class DiagnosticApi extends BaseAPI {
    /**
     * Sample request:        GET api/Diagnostic
     * @summary Get application launch time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticApi
     */
    public apiDiagnosticGet(options?: AxiosRequestConfig) {
        return DiagnosticApiFp(this.configuration).apiDiagnosticGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LocalizationApi - axios parameter creator
 * @export
 */
export const LocalizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets available localizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocalizationGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Localization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all localized strings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocalizationGetResourcesPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Localization/GetResources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set localization of current user
         * @param {string} [locale] Locale of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocalizationPost: async (locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Localization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get localize formatted string
         * @param {string} resourceKey Resource key
         * @param {string} arguments2 
         * @param {Array<any>} [arguments] Arguments for formatted string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocalizationResourceKeyArgumentsGet: async (resourceKey: string, arguments2: string, arguments3?: Array<any>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceKey' is not null or undefined
            assertParamExists('apiLocalizationResourceKeyArgumentsGet', 'resourceKey', resourceKey)
            // verify required parameter 'arguments2' is not null or undefined
            assertParamExists('apiLocalizationResourceKeyArgumentsGet', 'arguments2', arguments2)
            const localVarPath = `/api/Localization/{resourceKey}/{arguments}`
                .replace(`{${"resourceKey"}}`, encodeURIComponent(String(resourceKey)))
                .replace(`{${"arguments"}}`, encodeURIComponent(String(arguments2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (arguments3) {
                localVarQueryParameter['arguments'] = arguments3;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get localize string
         * @param {string} resourceKey Resource key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocalizationResourceKeyGet: async (resourceKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceKey' is not null or undefined
            assertParamExists('apiLocalizationResourceKeyGet', 'resourceKey', resourceKey)
            const localVarPath = `/api/Localization/{resourceKey}`
                .replace(`{${"resourceKey"}}`, encodeURIComponent(String(resourceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all localized strings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerLocalizationGetResourcesPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/worker/Localization/GetResources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get localize formatted string
         * @param {string} resourceKey Resource key
         * @param {string} arguments2 
         * @param {Array<any>} [arguments] Arguments for formatted string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerLocalizationResourceKeyArgumentsGet: async (resourceKey: string, arguments2: string, arguments3?: Array<any>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceKey' is not null or undefined
            assertParamExists('apiWorkerLocalizationResourceKeyArgumentsGet', 'resourceKey', resourceKey)
            // verify required parameter 'arguments2' is not null or undefined
            assertParamExists('apiWorkerLocalizationResourceKeyArgumentsGet', 'arguments2', arguments2)
            const localVarPath = `/api/worker/Localization/{resourceKey}/{arguments}`
                .replace(`{${"resourceKey"}}`, encodeURIComponent(String(resourceKey)))
                .replace(`{${"arguments"}}`, encodeURIComponent(String(arguments2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (arguments) {
                localVarQueryParameter['arguments'] = arguments3;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get localize string
         * @param {string} resourceKey Resource key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerLocalizationResourceKeyGet: async (resourceKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceKey' is not null or undefined
            assertParamExists('apiWorkerLocalizationResourceKeyGet', 'resourceKey', resourceKey)
            const localVarPath = `/api/worker/Localization/{resourceKey}`
                .replace(`{${"resourceKey"}}`, encodeURIComponent(String(resourceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocalizationApi - functional programming interface
 * @export
 */
export const LocalizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocalizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets available localizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLocalizationGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebAdminConsoleApplicationSettingsLocale>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLocalizationGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets all localized strings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLocalizationGetResourcesPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLocalizationGetResourcesPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set localization of current user
         * @param {string} [locale] Locale of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLocalizationPost(locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLocalizationPost(locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get localize formatted string
         * @param {string} resourceKey Resource key
         * @param {string} arguments2 
         * @param {Array<any>} [arguments] Arguments for formatted string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLocalizationResourceKeyArgumentsGet(resourceKey: string, arguments2: string, arguments3?: Array<any>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLocalizationResourceKeyArgumentsGet(resourceKey, arguments2, arguments3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get localize string
         * @param {string} resourceKey Resource key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLocalizationResourceKeyGet(resourceKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLocalizationResourceKeyGet(resourceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets all localized strings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerLocalizationGetResourcesPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerLocalizationGetResourcesPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get localize formatted string
         * @param {string} resourceKey Resource key
         * @param {string} arguments2 
         * @param {Array<any>} [arguments] Arguments for formatted string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerLocalizationResourceKeyArgumentsGet(resourceKey: string, arguments2: string, arguments3?: Array<any>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerLocalizationResourceKeyArgumentsGet(resourceKey, arguments2, arguments3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get localize string
         * @param {string} resourceKey Resource key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerLocalizationResourceKeyGet(resourceKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerLocalizationResourceKeyGet(resourceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocalizationApi - factory interface
 * @export
 */
export const LocalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocalizationApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets available localizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocalizationGet(options?: any): AxiosPromise<Array<DocsVisionWebAdminConsoleApplicationSettingsLocale>> {
            return localVarFp.apiLocalizationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all localized strings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocalizationGetResourcesPost(options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.apiLocalizationGetResourcesPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set localization of current user
         * @param {string} [locale] Locale of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocalizationPost(locale?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiLocalizationPost(locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get localize formatted string
         * @param {string} resourceKey Resource key
         * @param {string} arguments2 
         * @param {Array<any>} [arguments] Arguments for formatted string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocalizationResourceKeyArgumentsGet(resourceKey: string, arguments2: string, arguments3?: Array<any>, options?: any): AxiosPromise<string> {
            return localVarFp.apiLocalizationResourceKeyArgumentsGet(resourceKey, arguments2, arguments3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get localize string
         * @param {string} resourceKey Resource key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocalizationResourceKeyGet(resourceKey: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiLocalizationResourceKeyGet(resourceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all localized strings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerLocalizationGetResourcesPost(options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.apiWorkerLocalizationGetResourcesPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get localize formatted string
         * @param {string} resourceKey Resource key
         * @param {string} arguments2 
         * @param {Array<any>} [arguments] Arguments for formatted string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerLocalizationResourceKeyArgumentsGet(resourceKey: string, arguments2: string, arguments3?: Array<any>, options?: any): AxiosPromise<string> {
            return localVarFp.apiWorkerLocalizationResourceKeyArgumentsGet(resourceKey, arguments2, arguments3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get localize string
         * @param {string} resourceKey Resource key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerLocalizationResourceKeyGet(resourceKey: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiWorkerLocalizationResourceKeyGet(resourceKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocalizationApi - object-oriented interface
 * @export
 * @class LocalizationApi
 * @extends {BaseAPI}
 */
export class LocalizationApi extends BaseAPI {
    /**
     * 
     * @summary Gets available localizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    public apiLocalizationGet(options?: AxiosRequestConfig) {
        return LocalizationApiFp(this.configuration).apiLocalizationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all localized strings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    public apiLocalizationGetResourcesPost(options?: AxiosRequestConfig) {
        return LocalizationApiFp(this.configuration).apiLocalizationGetResourcesPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set localization of current user
     * @param {string} [locale] Locale of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    public apiLocalizationPost(locale?: string, options?: AxiosRequestConfig) {
        return LocalizationApiFp(this.configuration).apiLocalizationPost(locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get localize formatted string
     * @param {string} resourceKey Resource key
     * @param {string} arguments2 
     * @param {Array<any>} [arguments] Arguments for formatted string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    public apiLocalizationResourceKeyArgumentsGet(resourceKey: string, arguments2: string, arguments3?: Array<any>, options?: AxiosRequestConfig) {
        return LocalizationApiFp(this.configuration).apiLocalizationResourceKeyArgumentsGet(resourceKey, arguments2, arguments3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get localize string
     * @param {string} resourceKey Resource key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    public apiLocalizationResourceKeyGet(resourceKey: string, options?: AxiosRequestConfig) {
        return LocalizationApiFp(this.configuration).apiLocalizationResourceKeyGet(resourceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all localized strings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    public apiWorkerLocalizationGetResourcesPost(options?: AxiosRequestConfig) {
        return LocalizationApiFp(this.configuration).apiWorkerLocalizationGetResourcesPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get localize formatted string
     * @param {string} resourceKey Resource key
     * @param {string} arguments2 
     * @param {Array<any>} [arguments] Arguments for formatted string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    public apiWorkerLocalizationResourceKeyArgumentsGet(resourceKey: string, arguments2: string, arguments3?: Array<any>, options?: AxiosRequestConfig) {
        return LocalizationApiFp(this.configuration).apiWorkerLocalizationResourceKeyArgumentsGet(resourceKey, arguments2, arguments3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get localize string
     * @param {string} resourceKey Resource key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    public apiWorkerLocalizationResourceKeyGet(resourceKey: string, options?: AxiosRequestConfig) {
        return LocalizationApiFp(this.configuration).apiWorkerLocalizationResourceKeyGet(resourceKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MailConnectionsApi - axios parameter creator
 * @export
 */
export const MailConnectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE api/mailconnections/connectionId
         * @summary Deletes mail connection by identifier
         * @param {string} connectionId ID of mail connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMailConnectionsConnectionIdDelete: async (connectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionId' is not null or undefined
            assertParamExists('apiMailConnectionsConnectionIdDelete', 'connectionId', connectionId)
            const localVarPath = `/api/MailConnections/{connectionId}`
                .replace(`{${"connectionId"}}`, encodeURIComponent(String(connectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/mailconnections/connectionId
         * @summary Gets connection by identifier
         * @param {string} connectionId ID of mail connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMailConnectionsConnectionIdGet: async (connectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionId' is not null or undefined
            assertParamExists('apiMailConnectionsConnectionIdGet', 'connectionId', connectionId)
            const localVarPath = `/api/MailConnections/{connectionId}`
                .replace(`{${"connectionId"}}`, encodeURIComponent(String(connectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/mailconnections
         * @summary Gets mail connections list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMailConnectionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MailConnections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST api/mailconnections
         * @summary Adds mail connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection} [docsVisionWebAdminConsoleLogicConnectionsMailMailConnection] Information about connection being created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMailConnectionsPost: async (docsVisionWebAdminConsoleLogicConnectionsMailMailConnection?: DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MailConnections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT api/mailconnections
         * @summary Edits mail connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection} [docsVisionWebAdminConsoleLogicConnectionsMailMailConnection] Changes of mail connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMailConnectionsPut: async (docsVisionWebAdminConsoleLogicConnectionsMailMailConnection?: DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MailConnections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailConnectionsApi - functional programming interface
 * @export
 */
export const MailConnectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MailConnectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Sample request:        DELETE api/mailconnections/connectionId
         * @summary Deletes mail connection by identifier
         * @param {string} connectionId ID of mail connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMailConnectionsConnectionIdDelete(connectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMailConnectionsConnectionIdDelete(connectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/mailconnections/connectionId
         * @summary Gets connection by identifier
         * @param {string} connectionId ID of mail connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMailConnectionsConnectionIdGet(connectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleMailMailConnectionModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMailConnectionsConnectionIdGet(connectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/mailconnections
         * @summary Gets mail connections list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMailConnectionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebAdminConsoleMailMailConnectionModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMailConnectionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        POST api/mailconnections
         * @summary Adds mail connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection} [docsVisionWebAdminConsoleLogicConnectionsMailMailConnection] Information about connection being created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMailConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection?: DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMailConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        PUT api/mailconnections
         * @summary Edits mail connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection} [docsVisionWebAdminConsoleLogicConnectionsMailMailConnection] Changes of mail connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMailConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection?: DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMailConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MailConnectionsApi - factory interface
 * @export
 */
export const MailConnectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MailConnectionsApiFp(configuration)
    return {
        /**
         * Sample request:        DELETE api/mailconnections/connectionId
         * @summary Deletes mail connection by identifier
         * @param {string} connectionId ID of mail connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMailConnectionsConnectionIdDelete(connectionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiMailConnectionsConnectionIdDelete(connectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/mailconnections/connectionId
         * @summary Gets connection by identifier
         * @param {string} connectionId ID of mail connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMailConnectionsConnectionIdGet(connectionId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleMailMailConnectionModel> {
            return localVarFp.apiMailConnectionsConnectionIdGet(connectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/mailconnections
         * @summary Gets mail connections list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMailConnectionsGet(options?: any): AxiosPromise<Array<DocsVisionWebAdminConsoleMailMailConnectionModel>> {
            return localVarFp.apiMailConnectionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        POST api/mailconnections
         * @summary Adds mail connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection} [docsVisionWebAdminConsoleLogicConnectionsMailMailConnection] Information about connection being created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMailConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection?: DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options?: any): AxiosPromise<void> {
            return localVarFp.apiMailConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        PUT api/mailconnections
         * @summary Edits mail connection
         * @param {DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection} [docsVisionWebAdminConsoleLogicConnectionsMailMailConnection] Changes of mail connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMailConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection?: DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options?: any): AxiosPromise<void> {
            return localVarFp.apiMailConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MailConnectionsApi - object-oriented interface
 * @export
 * @class MailConnectionsApi
 * @extends {BaseAPI}
 */
export class MailConnectionsApi extends BaseAPI {
    /**
     * Sample request:        DELETE api/mailconnections/connectionId
     * @summary Deletes mail connection by identifier
     * @param {string} connectionId ID of mail connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailConnectionsApi
     */
    public apiMailConnectionsConnectionIdDelete(connectionId: string, options?: AxiosRequestConfig) {
        return MailConnectionsApiFp(this.configuration).apiMailConnectionsConnectionIdDelete(connectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/mailconnections/connectionId
     * @summary Gets connection by identifier
     * @param {string} connectionId ID of mail connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailConnectionsApi
     */
    public apiMailConnectionsConnectionIdGet(connectionId: string, options?: AxiosRequestConfig) {
        return MailConnectionsApiFp(this.configuration).apiMailConnectionsConnectionIdGet(connectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/mailconnections
     * @summary Gets mail connections list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailConnectionsApi
     */
    public apiMailConnectionsGet(options?: AxiosRequestConfig) {
        return MailConnectionsApiFp(this.configuration).apiMailConnectionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        POST api/mailconnections
     * @summary Adds mail connection
     * @param {DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection} [docsVisionWebAdminConsoleLogicConnectionsMailMailConnection] Information about connection being created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailConnectionsApi
     */
    public apiMailConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection?: DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options?: AxiosRequestConfig) {
        return MailConnectionsApiFp(this.configuration).apiMailConnectionsPost(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        PUT api/mailconnections
     * @summary Edits mail connection
     * @param {DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection} [docsVisionWebAdminConsoleLogicConnectionsMailMailConnection] Changes of mail connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailConnectionsApi
     */
    public apiMailConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection?: DocsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options?: AxiosRequestConfig) {
        return MailConnectionsApiFp(this.configuration).apiMailConnectionsPut(docsVisionWebAdminConsoleLogicConnectionsMailMailConnection, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId
         * @summary Get details information about message
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesDvConnectionIdMessageCardIdMessageIdGet: async (dvConnectionId: string, messageCardId: string, messageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'messageCardId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdGet', 'messageCardId', messageCardId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdGet', 'messageId', messageId)
            const localVarPath = `/api/Messages/{dvConnectionId}/{messageCardId}/{messageId}`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"messageCardId"}}`, encodeURIComponent(String(messageCardId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/info
         * @summary Get details information about message with card messages information
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesDvConnectionIdMessageCardIdMessageIdInfoGet: async (dvConnectionId: string, messageCardId: string, messageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdInfoGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'messageCardId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdInfoGet', 'messageCardId', messageCardId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdInfoGet', 'messageId', messageId)
            const localVarPath = `/api/Messages/{dvConnectionId}/{messageCardId}/{messageId}/info`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"messageCardId"}}`, encodeURIComponent(String(messageCardId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/messageLogItems?page=1
         * @summary Get log by message from card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesDvConnectionIdMessageCardIdMessageIdMessageLogItemsGet: async (dvConnectionId: string, messageCardId: string, messageId: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdMessageLogItemsGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'messageCardId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdMessageLogItemsGet', 'messageCardId', messageCardId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdMessageLogItemsGet', 'messageId', messageId)
            const localVarPath = `/api/Messages/{dvConnectionId}/{messageCardId}/{messageId}/messageLogItems`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"messageCardId"}}`, encodeURIComponent(String(messageCardId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/waitingLocks?page=1
         * @summary Get details information about waiting locks
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesDvConnectionIdMessageCardIdMessageIdWaitingLocksGet: async (dvConnectionId: string, messageCardId: string, messageId: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdWaitingLocksGet', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'messageCardId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdWaitingLocksGet', 'messageCardId', messageCardId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiMessagesDvConnectionIdMessageCardIdMessageIdWaitingLocksGet', 'messageId', messageId)
            const localVarPath = `/api/Messages/{dvConnectionId}/{messageCardId}/{messageId}/waitingLocks`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"messageCardId"}}`, encodeURIComponent(String(messageCardId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/messages
         * @summary Get test message of controller
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove exist card lock
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {string} [lockRowId] Lock ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesRemovelockDvConnectionIdMessageCardIdMessageIdPost: async (dvConnectionId: string, messageCardId: string, messageId: string, lockRowId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiMessagesRemovelockDvConnectionIdMessageCardIdMessageIdPost', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'messageCardId' is not null or undefined
            assertParamExists('apiMessagesRemovelockDvConnectionIdMessageCardIdMessageIdPost', 'messageCardId', messageCardId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiMessagesRemovelockDvConnectionIdMessageCardIdMessageIdPost', 'messageId', messageId)
            const localVarPath = `/api/Messages/removelock/{dvConnectionId}/{messageCardId}/{messageId}`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"messageCardId"}}`, encodeURIComponent(String(messageCardId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lockRowId !== undefined) {
                localVarQueryParameter['lockRowId'] = lockRowId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove exist card locks
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesRemovelocksDvConnectionIdMessageCardIdMessageIdPost: async (dvConnectionId: string, messageCardId: string, messageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiMessagesRemovelocksDvConnectionIdMessageCardIdMessageIdPost', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'messageCardId' is not null or undefined
            assertParamExists('apiMessagesRemovelocksDvConnectionIdMessageCardIdMessageIdPost', 'messageCardId', messageCardId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiMessagesRemovelocksDvConnectionIdMessageCardIdMessageIdPost', 'messageId', messageId)
            const localVarPath = `/api/Messages/removelocks/{dvConnectionId}/{messageCardId}/{messageId}`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"messageCardId"}}`, encodeURIComponent(String(messageCardId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} dvConnectionId 
         * @param {string} messageCardId 
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesRepeatprocessingDvConnectionIdMessageCardIdMessageIdPost: async (dvConnectionId: string, messageCardId: string, messageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiMessagesRepeatprocessingDvConnectionIdMessageCardIdMessageIdPost', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'messageCardId' is not null or undefined
            assertParamExists('apiMessagesRepeatprocessingDvConnectionIdMessageCardIdMessageIdPost', 'messageCardId', messageCardId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiMessagesRepeatprocessingDvConnectionIdMessageCardIdMessageIdPost', 'messageId', messageId)
            const localVarPath = `/api/Messages/repeatprocessing/{dvConnectionId}/{messageCardId}/{messageId}`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"messageCardId"}}`, encodeURIComponent(String(messageCardId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets outgoing message activation datetime
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {string} [activationDateTime] Date and time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesSettimeDvConnectionIdMessageCardIdOutgoingMessageIdPost: async (dvConnectionId: string, messageCardId: string, messageId: string, activationDateTime?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiMessagesSettimeDvConnectionIdMessageCardIdOutgoingMessageIdPost', 'dvConnectionId', dvConnectionId)
            // verify required parameter 'messageCardId' is not null or undefined
            assertParamExists('apiMessagesSettimeDvConnectionIdMessageCardIdOutgoingMessageIdPost', 'messageCardId', messageCardId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('apiMessagesSettimeDvConnectionIdMessageCardIdOutgoingMessageIdPost', 'messageId', messageId)
            const localVarPath = `/api/Messages/settime/{dvConnectionId}/{messageCardId}/outgoing/{messageId}`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)))
                .replace(`{${"messageCardId"}}`, encodeURIComponent(String(messageCardId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (activationDateTime !== undefined) {
                localVarQueryParameter['activationDateTime'] = (activationDateTime as any instanceof Date) ?
                    (activationDateTime as any).toISOString() :
                    activationDateTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId
         * @summary Get details information about message
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMessagesDvConnectionIdMessageCardIdMessageIdGet(dvConnectionId: string, messageCardId: string, messageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageDetailsInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMessagesDvConnectionIdMessageCardIdMessageIdGet(dvConnectionId, messageCardId, messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/info
         * @summary Get details information about message with card messages information
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMessagesDvConnectionIdMessageCardIdMessageIdInfoGet(dvConnectionId: string, messageCardId: string, messageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMessagesDvConnectionIdMessageCardIdMessageIdInfoGet(dvConnectionId, messageCardId, messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/messageLogItems?page=1
         * @summary Get log by message from card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMessagesDvConnectionIdMessageCardIdMessageIdMessageLogItemsGet(dvConnectionId: string, messageCardId: string, messageId: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItemCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMessagesDvConnectionIdMessageCardIdMessageIdMessageLogItemsGet(dvConnectionId, messageCardId, messageId, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/waitingLocks?page=1
         * @summary Get details information about waiting locks
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMessagesDvConnectionIdMessageCardIdMessageIdWaitingLocksGet(dvConnectionId: string, messageCardId: string, messageId: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfoCustomWebService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMessagesDvConnectionIdMessageCardIdMessageIdWaitingLocksGet(dvConnectionId, messageCardId, messageId, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/messages
         * @summary Get test message of controller
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMessagesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMessagesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove exist card lock
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {string} [lockRowId] Lock ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMessagesRemovelockDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, lockRowId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMessagesRemovelockDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId, messageCardId, messageId, lockRowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove exist card locks
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMessagesRemovelocksDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMessagesRemovelocksDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId, messageCardId, messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} dvConnectionId 
         * @param {string} messageCardId 
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMessagesRepeatprocessingDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageDetailsInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMessagesRepeatprocessingDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId, messageCardId, messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets outgoing message activation datetime
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {string} [activationDateTime] Date and time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMessagesSettimeDvConnectionIdMessageCardIdOutgoingMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, activationDateTime?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMessagesSettimeDvConnectionIdMessageCardIdOutgoingMessageIdPost(dvConnectionId, messageCardId, messageId, activationDateTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiFp(configuration)
    return {
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId
         * @summary Get details information about message
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesDvConnectionIdMessageCardIdMessageIdGet(dvConnectionId: string, messageCardId: string, messageId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageDetailsInfo> {
            return localVarFp.apiMessagesDvConnectionIdMessageCardIdMessageIdGet(dvConnectionId, messageCardId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/info
         * @summary Get details information about message with card messages information
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesDvConnectionIdMessageCardIdMessageIdInfoGet(dvConnectionId: string, messageCardId: string, messageId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageInfo> {
            return localVarFp.apiMessagesDvConnectionIdMessageCardIdMessageIdInfoGet(dvConnectionId, messageCardId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/messageLogItems?page=1
         * @summary Get log by message from card messages
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesDvConnectionIdMessageCardIdMessageIdMessageLogItemsGet(dvConnectionId: string, messageCardId: string, messageId: string, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLogItemCustomWebService> {
            return localVarFp.apiMessagesDvConnectionIdMessageCardIdMessageIdMessageLogItemsGet(dvConnectionId, messageCardId, messageId, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/waitingLocks?page=1
         * @summary Get details information about waiting locks
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
         * @param {number} [pageSize] Размер страницы
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesDvConnectionIdMessageCardIdMessageIdWaitingLocksGet(dvConnectionId: string, messageCardId: string, messageId: string, page?: number, pageSize?: number, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesPaginationInfoDocsVisionWebAdminConsoleWorkerExtensionModelsResponsesMessageLockInfoCustomWebService> {
            return localVarFp.apiMessagesDvConnectionIdMessageCardIdMessageIdWaitingLocksGet(dvConnectionId, messageCardId, messageId, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/messages
         * @summary Get test message of controller
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiMessagesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove exist card lock
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {string} [lockRowId] Lock ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesRemovelockDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, lockRowId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiMessagesRemovelockDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId, messageCardId, messageId, lockRowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove exist card locks
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesRemovelocksDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiMessagesRemovelocksDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId, messageCardId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} dvConnectionId 
         * @param {string} messageCardId 
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesRepeatprocessingDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesIncomingMessageDetailsInfo> {
            return localVarFp.apiMessagesRepeatprocessingDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId, messageCardId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets outgoing message activation datetime
         * @param {string} dvConnectionId ID of connection to Docsvision
         * @param {string} messageCardId Card messages ID
         * @param {string} messageId Message ID
         * @param {string} [activationDateTime] Date and time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMessagesSettimeDvConnectionIdMessageCardIdOutgoingMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, activationDateTime?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiMessagesSettimeDvConnectionIdMessageCardIdOutgoingMessageIdPost(dvConnectionId, messageCardId, messageId, activationDateTime, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId
     * @summary Get details information about message
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} messageCardId Card messages ID
     * @param {string} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public apiMessagesDvConnectionIdMessageCardIdMessageIdGet(dvConnectionId: string, messageCardId: string, messageId: string, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).apiMessagesDvConnectionIdMessageCardIdMessageIdGet(dvConnectionId, messageCardId, messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/info
     * @summary Get details information about message with card messages information
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} messageCardId Card messages ID
     * @param {string} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public apiMessagesDvConnectionIdMessageCardIdMessageIdInfoGet(dvConnectionId: string, messageCardId: string, messageId: string, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).apiMessagesDvConnectionIdMessageCardIdMessageIdInfoGet(dvConnectionId, messageCardId, messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/messageLogItems?page=1
     * @summary Get log by message from card messages
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} messageCardId Card messages ID
     * @param {string} messageId Message ID
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public apiMessagesDvConnectionIdMessageCardIdMessageIdMessageLogItemsGet(dvConnectionId: string, messageCardId: string, messageId: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).apiMessagesDvConnectionIdMessageCardIdMessageIdMessageLogItemsGet(dvConnectionId, messageCardId, messageId, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/messages/dvConnectionId/messageCardId/messageId/waitingLocks?page=1
     * @summary Get details information about waiting locks
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} messageCardId Card messages ID
     * @param {string} messageId Message ID
     * @param {number} [page] Номер страницы в клиентской нумерации (с 1)
     * @param {number} [pageSize] Размер страницы
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public apiMessagesDvConnectionIdMessageCardIdMessageIdWaitingLocksGet(dvConnectionId: string, messageCardId: string, messageId: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).apiMessagesDvConnectionIdMessageCardIdMessageIdWaitingLocksGet(dvConnectionId, messageCardId, messageId, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/messages
     * @summary Get test message of controller
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public apiMessagesGet(options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).apiMessagesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove exist card lock
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} messageCardId Card messages ID
     * @param {string} messageId Message ID
     * @param {string} [lockRowId] Lock ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public apiMessagesRemovelockDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, lockRowId?: string, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).apiMessagesRemovelockDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId, messageCardId, messageId, lockRowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove exist card locks
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} messageCardId Card messages ID
     * @param {string} messageId Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public apiMessagesRemovelocksDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).apiMessagesRemovelocksDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId, messageCardId, messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} dvConnectionId 
     * @param {string} messageCardId 
     * @param {string} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public apiMessagesRepeatprocessingDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).apiMessagesRepeatprocessingDvConnectionIdMessageCardIdMessageIdPost(dvConnectionId, messageCardId, messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets outgoing message activation datetime
     * @param {string} dvConnectionId ID of connection to Docsvision
     * @param {string} messageCardId Card messages ID
     * @param {string} messageId Message ID
     * @param {string} [activationDateTime] Date and time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public apiMessagesSettimeDvConnectionIdMessageCardIdOutgoingMessageIdPost(dvConnectionId: string, messageCardId: string, messageId: string, activationDateTime?: string, options?: AxiosRequestConfig) {
        return MessagesApiFp(this.configuration).apiMessagesSettimeDvConnectionIdMessageCardIdOutgoingMessageIdPost(dvConnectionId, messageCardId, messageId, activationDateTime, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SettingsStorageApi - axios parameter creator
 * @export
 */
export const SettingsStorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets settings from storage
         * @param {string} [nodePath] Settings node path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsStorageGet: async (nodePath?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SettingsStorage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nodePath !== undefined) {
                localVarQueryParameter['nodePath'] = nodePath;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Imports settings to storage
         * @param {string} [settingsJson] Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsStorageSetGet: async (settingsJson?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SettingsStorage/Set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (settingsJson !== undefined) {
                localVarQueryParameter['settingsJson'] = settingsJson;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsStorageApi - functional programming interface
 * @export
 */
export const SettingsStorageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsStorageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets settings from storage
         * @param {string} [nodePath] Settings node path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingsStorageGet(nodePath?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingsStorageGet(nodePath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Imports settings to storage
         * @param {string} [settingsJson] Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingsStorageSetGet(settingsJson?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingsStorageSetGet(settingsJson, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettingsStorageApi - factory interface
 * @export
 */
export const SettingsStorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsStorageApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets settings from storage
         * @param {string} [nodePath] Settings node path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsStorageGet(nodePath?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiSettingsStorageGet(nodePath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Imports settings to storage
         * @param {string} [settingsJson] Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsStorageSetGet(settingsJson?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiSettingsStorageSetGet(settingsJson, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsStorageApi - object-oriented interface
 * @export
 * @class SettingsStorageApi
 * @extends {BaseAPI}
 */
export class SettingsStorageApi extends BaseAPI {
    /**
     * 
     * @summary Gets settings from storage
     * @param {string} [nodePath] Settings node path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsStorageApi
     */
    public apiSettingsStorageGet(nodePath?: string, options?: AxiosRequestConfig) {
        return SettingsStorageApiFp(this.configuration).apiSettingsStorageGet(nodePath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Imports settings to storage
     * @param {string} [settingsJson] Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsStorageApi
     */
    public apiSettingsStorageSetGet(settingsJson?: string, options?: AxiosRequestConfig) {
        return SettingsStorageApiFp(this.configuration).apiSettingsStorageSetGet(settingsJson, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TenantsApi - axios parameter creator
 * @export
 */
export const TenantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE api/tenants/dvConnectionId
         * @summary Deletes DocsVision connection by identifier
         * @param {string} dvConnectionId Docsvision connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsDvConnectionIdDelete: async (dvConnectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiTenantsDvConnectionIdDelete', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/Tenants/{dvConnectionId}`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/tenants/dvConnectionId
         * @summary Gets DocsVision connection by identifier
         * @param {string} dvConnectionId Docsvision connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsDvConnectionIdGet: async (dvConnectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dvConnectionId' is not null or undefined
            assertParamExists('apiTenantsDvConnectionIdGet', 'dvConnectionId', dvConnectionId)
            const localVarPath = `/api/Tenants/{dvConnectionId}`
                .replace(`{${"dvConnectionId"}}`, encodeURIComponent(String(dvConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST api/tenants/find
         * @summary Find DocsVision connection by database alias and Docsvision server connect address
         * @param {DocsVisionManagementConsoleDvFindDvConnectionModel} [docsVisionManagementConsoleDvFindDvConnectionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsFindPost: async (docsVisionManagementConsoleDvFindDvConnectionModel?: DocsVisionManagementConsoleDvFindDvConnectionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tenants/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionManagementConsoleDvFindDvConnectionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/tenants
         * @summary Gets DocsVision connections list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST api/tenants
         * @summary Adds DocsVision connection
         * @param {DocsVisionWebAdminConsoleDvCreateDvConnectionModel} [docsVisionWebAdminConsoleDvCreateDvConnectionModel] Information about connecting to Docsvision
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsPost: async (docsVisionWebAdminConsoleDvCreateDvConnectionModel?: DocsVisionWebAdminConsoleDvCreateDvConnectionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleDvCreateDvConnectionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT api/tenants
         * @summary Edits DocsVision connection
         * @param {DocsVisionWebAdminConsoleDvUpdateDvConnectionModel} [docsVisionWebAdminConsoleDvUpdateDvConnectionModel] Changes of connecting to Docsvision
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsPut: async (docsVisionWebAdminConsoleDvUpdateDvConnectionModel?: DocsVisionWebAdminConsoleDvUpdateDvConnectionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleDvUpdateDvConnectionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantsApi - functional programming interface
 * @export
 */
export const TenantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantsApiAxiosParamCreator(configuration)
    return {
        /**
         * Sample request:        DELETE api/tenants/dvConnectionId
         * @summary Deletes DocsVision connection by identifier
         * @param {string} dvConnectionId Docsvision connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTenantsDvConnectionIdDelete(dvConnectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTenantsDvConnectionIdDelete(dvConnectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/tenants/dvConnectionId
         * @summary Gets DocsVision connection by identifier
         * @param {string} dvConnectionId Docsvision connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTenantsDvConnectionIdGet(dvConnectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleDvDvConnectionModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTenantsDvConnectionIdGet(dvConnectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        POST api/tenants/find
         * @summary Find DocsVision connection by database alias and Docsvision server connect address
         * @param {DocsVisionManagementConsoleDvFindDvConnectionModel} [docsVisionManagementConsoleDvFindDvConnectionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTenantsFindPost(docsVisionManagementConsoleDvFindDvConnectionModel?: DocsVisionManagementConsoleDvFindDvConnectionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleDvDvConnectionModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTenantsFindPost(docsVisionManagementConsoleDvFindDvConnectionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/tenants
         * @summary Gets DocsVision connections list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTenantsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebAdminConsoleDvDvConnectionModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTenantsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        POST api/tenants
         * @summary Adds DocsVision connection
         * @param {DocsVisionWebAdminConsoleDvCreateDvConnectionModel} [docsVisionWebAdminConsoleDvCreateDvConnectionModel] Information about connecting to Docsvision
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTenantsPost(docsVisionWebAdminConsoleDvCreateDvConnectionModel?: DocsVisionWebAdminConsoleDvCreateDvConnectionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTenantsPost(docsVisionWebAdminConsoleDvCreateDvConnectionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        PUT api/tenants
         * @summary Edits DocsVision connection
         * @param {DocsVisionWebAdminConsoleDvUpdateDvConnectionModel} [docsVisionWebAdminConsoleDvUpdateDvConnectionModel] Changes of connecting to Docsvision
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTenantsPut(docsVisionWebAdminConsoleDvUpdateDvConnectionModel?: DocsVisionWebAdminConsoleDvUpdateDvConnectionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTenantsPut(docsVisionWebAdminConsoleDvUpdateDvConnectionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantsApi - factory interface
 * @export
 */
export const TenantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantsApiFp(configuration)
    return {
        /**
         * Sample request:        DELETE api/tenants/dvConnectionId
         * @summary Deletes DocsVision connection by identifier
         * @param {string} dvConnectionId Docsvision connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsDvConnectionIdDelete(dvConnectionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiTenantsDvConnectionIdDelete(dvConnectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/tenants/dvConnectionId
         * @summary Gets DocsVision connection by identifier
         * @param {string} dvConnectionId Docsvision connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsDvConnectionIdGet(dvConnectionId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleDvDvConnectionModel> {
            return localVarFp.apiTenantsDvConnectionIdGet(dvConnectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        POST api/tenants/find
         * @summary Find DocsVision connection by database alias and Docsvision server connect address
         * @param {DocsVisionManagementConsoleDvFindDvConnectionModel} [docsVisionManagementConsoleDvFindDvConnectionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsFindPost(docsVisionManagementConsoleDvFindDvConnectionModel?: DocsVisionManagementConsoleDvFindDvConnectionModel, options?: any): AxiosPromise<DocsVisionWebAdminConsoleDvDvConnectionModel> {
            return localVarFp.apiTenantsFindPost(docsVisionManagementConsoleDvFindDvConnectionModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/tenants
         * @summary Gets DocsVision connections list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsGet(options?: any): AxiosPromise<Array<DocsVisionWebAdminConsoleDvDvConnectionModel>> {
            return localVarFp.apiTenantsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        POST api/tenants
         * @summary Adds DocsVision connection
         * @param {DocsVisionWebAdminConsoleDvCreateDvConnectionModel} [docsVisionWebAdminConsoleDvCreateDvConnectionModel] Information about connecting to Docsvision
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsPost(docsVisionWebAdminConsoleDvCreateDvConnectionModel?: DocsVisionWebAdminConsoleDvCreateDvConnectionModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiTenantsPost(docsVisionWebAdminConsoleDvCreateDvConnectionModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        PUT api/tenants
         * @summary Edits DocsVision connection
         * @param {DocsVisionWebAdminConsoleDvUpdateDvConnectionModel} [docsVisionWebAdminConsoleDvUpdateDvConnectionModel] Changes of connecting to Docsvision
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTenantsPut(docsVisionWebAdminConsoleDvUpdateDvConnectionModel?: DocsVisionWebAdminConsoleDvUpdateDvConnectionModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiTenantsPut(docsVisionWebAdminConsoleDvUpdateDvConnectionModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantsApi - object-oriented interface
 * @export
 * @class TenantsApi
 * @extends {BaseAPI}
 */
export class TenantsApi extends BaseAPI {
    /**
     * Sample request:        DELETE api/tenants/dvConnectionId
     * @summary Deletes DocsVision connection by identifier
     * @param {string} dvConnectionId Docsvision connection ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public apiTenantsDvConnectionIdDelete(dvConnectionId: string, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).apiTenantsDvConnectionIdDelete(dvConnectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/tenants/dvConnectionId
     * @summary Gets DocsVision connection by identifier
     * @param {string} dvConnectionId Docsvision connection ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public apiTenantsDvConnectionIdGet(dvConnectionId: string, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).apiTenantsDvConnectionIdGet(dvConnectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        POST api/tenants/find
     * @summary Find DocsVision connection by database alias and Docsvision server connect address
     * @param {DocsVisionManagementConsoleDvFindDvConnectionModel} [docsVisionManagementConsoleDvFindDvConnectionModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public apiTenantsFindPost(docsVisionManagementConsoleDvFindDvConnectionModel?: DocsVisionManagementConsoleDvFindDvConnectionModel, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).apiTenantsFindPost(docsVisionManagementConsoleDvFindDvConnectionModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/tenants
     * @summary Gets DocsVision connections list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public apiTenantsGet(options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).apiTenantsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        POST api/tenants
     * @summary Adds DocsVision connection
     * @param {DocsVisionWebAdminConsoleDvCreateDvConnectionModel} [docsVisionWebAdminConsoleDvCreateDvConnectionModel] Information about connecting to Docsvision
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public apiTenantsPost(docsVisionWebAdminConsoleDvCreateDvConnectionModel?: DocsVisionWebAdminConsoleDvCreateDvConnectionModel, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).apiTenantsPost(docsVisionWebAdminConsoleDvCreateDvConnectionModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        PUT api/tenants
     * @summary Edits DocsVision connection
     * @param {DocsVisionWebAdminConsoleDvUpdateDvConnectionModel} [docsVisionWebAdminConsoleDvUpdateDvConnectionModel] Changes of connecting to Docsvision
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public apiTenantsPut(docsVisionWebAdminConsoleDvUpdateDvConnectionModel?: DocsVisionWebAdminConsoleDvUpdateDvConnectionModel, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).apiTenantsPut(docsVisionWebAdminConsoleDvUpdateDvConnectionModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WidgetsApi - axios parameter creator
 * @export
 */
export const WidgetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET api/widgets/dashboardId
         * @summary Gets widgets list
         * @param {string} dashboardId Dashboard identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWidgetsDashboardIdGet: async (dashboardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('apiWidgetsDashboardIdGet', 'dashboardId', dashboardId)
            const localVarPath = `/api/Widgets/{dashboardId}`
                .replace(`{${"dashboardId"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST api/widgets/dashboardId
         * @summary Adds widget
         * @param {string} dashboardId Dashboard identifier
         * @param {DocsVisionWebAdminConsoleLogicWidgetsWidget} [docsVisionWebAdminConsoleLogicWidgetsWidget] Settings of new widget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWidgetsDashboardIdPost: async (dashboardId: string, docsVisionWebAdminConsoleLogicWidgetsWidget?: DocsVisionWebAdminConsoleLogicWidgetsWidget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('apiWidgetsDashboardIdPost', 'dashboardId', dashboardId)
            const localVarPath = `/api/Widgets/{dashboardId}`
                .replace(`{${"dashboardId"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleLogicWidgetsWidget, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE api/widgets/dashboardId/widgetId
         * @summary Deletes widget by identifier
         * @param {string} dashboardId Dashboard identifier
         * @param {string} widgetId Widget identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWidgetsDashboardIdWidgetIdDelete: async (dashboardId: string, widgetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('apiWidgetsDashboardIdWidgetIdDelete', 'dashboardId', dashboardId)
            // verify required parameter 'widgetId' is not null or undefined
            assertParamExists('apiWidgetsDashboardIdWidgetIdDelete', 'widgetId', widgetId)
            const localVarPath = `/api/Widgets/{dashboardId}/{widgetId}`
                .replace(`{${"dashboardId"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"widgetId"}}`, encodeURIComponent(String(widgetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/widgets/dashboardId/widgetId
         * @summary Gets widget by identifier
         * @param {string} dashboardId Dashboard identifier
         * @param {string} widgetId Widget identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWidgetsDashboardIdWidgetIdGet: async (dashboardId: string, widgetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('apiWidgetsDashboardIdWidgetIdGet', 'dashboardId', dashboardId)
            // verify required parameter 'widgetId' is not null or undefined
            assertParamExists('apiWidgetsDashboardIdWidgetIdGet', 'widgetId', widgetId)
            const localVarPath = `/api/Widgets/{dashboardId}/{widgetId}`
                .replace(`{${"dashboardId"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"widgetId"}}`, encodeURIComponent(String(widgetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST api/widgets/dashboardId
         * @summary Sets widget settings
         * @param {string} dashboardId Dashboard identifier
         * @param {string} widgetId Widget identifier
         * @param {DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange} [docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange] Changes of widget settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWidgetsDashboardIdWidgetIdPost: async (dashboardId: string, widgetId: string, docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange?: DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('apiWidgetsDashboardIdWidgetIdPost', 'dashboardId', dashboardId)
            // verify required parameter 'widgetId' is not null or undefined
            assertParamExists('apiWidgetsDashboardIdWidgetIdPost', 'widgetId', widgetId)
            const localVarPath = `/api/Widgets/{dashboardId}/{widgetId}`
                .replace(`{${"dashboardId"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"widgetId"}}`, encodeURIComponent(String(widgetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WidgetsApi - functional programming interface
 * @export
 */
export const WidgetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WidgetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Sample request:        GET api/widgets/dashboardId
         * @summary Gets widgets list
         * @param {string} dashboardId Dashboard identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWidgetsDashboardIdGet(dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebAdminConsoleLogicWidgetsWidget>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWidgetsDashboardIdGet(dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        POST api/widgets/dashboardId
         * @summary Adds widget
         * @param {string} dashboardId Dashboard identifier
         * @param {DocsVisionWebAdminConsoleLogicWidgetsWidget} [docsVisionWebAdminConsoleLogicWidgetsWidget] Settings of new widget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWidgetsDashboardIdPost(dashboardId: string, docsVisionWebAdminConsoleLogicWidgetsWidget?: DocsVisionWebAdminConsoleLogicWidgetsWidget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWidgetsDashboardIdPost(dashboardId, docsVisionWebAdminConsoleLogicWidgetsWidget, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        DELETE api/widgets/dashboardId/widgetId
         * @summary Deletes widget by identifier
         * @param {string} dashboardId Dashboard identifier
         * @param {string} widgetId Widget identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWidgetsDashboardIdWidgetIdDelete(dashboardId: string, widgetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWidgetsDashboardIdWidgetIdDelete(dashboardId, widgetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/widgets/dashboardId/widgetId
         * @summary Gets widget by identifier
         * @param {string} dashboardId Dashboard identifier
         * @param {string} widgetId Widget identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWidgetsDashboardIdWidgetIdGet(dashboardId: string, widgetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleLogicWidgetsWidget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWidgetsDashboardIdWidgetIdGet(dashboardId, widgetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        POST api/widgets/dashboardId
         * @summary Sets widget settings
         * @param {string} dashboardId Dashboard identifier
         * @param {string} widgetId Widget identifier
         * @param {DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange} [docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange] Changes of widget settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWidgetsDashboardIdWidgetIdPost(dashboardId: string, widgetId: string, docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange?: DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWidgetsDashboardIdWidgetIdPost(dashboardId, widgetId, docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WidgetsApi - factory interface
 * @export
 */
export const WidgetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WidgetsApiFp(configuration)
    return {
        /**
         * Sample request:        GET api/widgets/dashboardId
         * @summary Gets widgets list
         * @param {string} dashboardId Dashboard identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWidgetsDashboardIdGet(dashboardId: string, options?: any): AxiosPromise<Array<DocsVisionWebAdminConsoleLogicWidgetsWidget>> {
            return localVarFp.apiWidgetsDashboardIdGet(dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        POST api/widgets/dashboardId
         * @summary Adds widget
         * @param {string} dashboardId Dashboard identifier
         * @param {DocsVisionWebAdminConsoleLogicWidgetsWidget} [docsVisionWebAdminConsoleLogicWidgetsWidget] Settings of new widget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWidgetsDashboardIdPost(dashboardId: string, docsVisionWebAdminConsoleLogicWidgetsWidget?: DocsVisionWebAdminConsoleLogicWidgetsWidget, options?: any): AxiosPromise<void> {
            return localVarFp.apiWidgetsDashboardIdPost(dashboardId, docsVisionWebAdminConsoleLogicWidgetsWidget, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        DELETE api/widgets/dashboardId/widgetId
         * @summary Deletes widget by identifier
         * @param {string} dashboardId Dashboard identifier
         * @param {string} widgetId Widget identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWidgetsDashboardIdWidgetIdDelete(dashboardId: string, widgetId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiWidgetsDashboardIdWidgetIdDelete(dashboardId, widgetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/widgets/dashboardId/widgetId
         * @summary Gets widget by identifier
         * @param {string} dashboardId Dashboard identifier
         * @param {string} widgetId Widget identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWidgetsDashboardIdWidgetIdGet(dashboardId: string, widgetId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleLogicWidgetsWidget> {
            return localVarFp.apiWidgetsDashboardIdWidgetIdGet(dashboardId, widgetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        POST api/widgets/dashboardId
         * @summary Sets widget settings
         * @param {string} dashboardId Dashboard identifier
         * @param {string} widgetId Widget identifier
         * @param {DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange} [docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange] Changes of widget settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWidgetsDashboardIdWidgetIdPost(dashboardId: string, widgetId: string, docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange?: DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange, options?: any): AxiosPromise<void> {
            return localVarFp.apiWidgetsDashboardIdWidgetIdPost(dashboardId, widgetId, docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WidgetsApi - object-oriented interface
 * @export
 * @class WidgetsApi
 * @extends {BaseAPI}
 */
export class WidgetsApi extends BaseAPI {
    /**
     * Sample request:        GET api/widgets/dashboardId
     * @summary Gets widgets list
     * @param {string} dashboardId Dashboard identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WidgetsApi
     */
    public apiWidgetsDashboardIdGet(dashboardId: string, options?: AxiosRequestConfig) {
        return WidgetsApiFp(this.configuration).apiWidgetsDashboardIdGet(dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        POST api/widgets/dashboardId
     * @summary Adds widget
     * @param {string} dashboardId Dashboard identifier
     * @param {DocsVisionWebAdminConsoleLogicWidgetsWidget} [docsVisionWebAdminConsoleLogicWidgetsWidget] Settings of new widget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WidgetsApi
     */
    public apiWidgetsDashboardIdPost(dashboardId: string, docsVisionWebAdminConsoleLogicWidgetsWidget?: DocsVisionWebAdminConsoleLogicWidgetsWidget, options?: AxiosRequestConfig) {
        return WidgetsApiFp(this.configuration).apiWidgetsDashboardIdPost(dashboardId, docsVisionWebAdminConsoleLogicWidgetsWidget, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        DELETE api/widgets/dashboardId/widgetId
     * @summary Deletes widget by identifier
     * @param {string} dashboardId Dashboard identifier
     * @param {string} widgetId Widget identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WidgetsApi
     */
    public apiWidgetsDashboardIdWidgetIdDelete(dashboardId: string, widgetId: string, options?: AxiosRequestConfig) {
        return WidgetsApiFp(this.configuration).apiWidgetsDashboardIdWidgetIdDelete(dashboardId, widgetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/widgets/dashboardId/widgetId
     * @summary Gets widget by identifier
     * @param {string} dashboardId Dashboard identifier
     * @param {string} widgetId Widget identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WidgetsApi
     */
    public apiWidgetsDashboardIdWidgetIdGet(dashboardId: string, widgetId: string, options?: AxiosRequestConfig) {
        return WidgetsApiFp(this.configuration).apiWidgetsDashboardIdWidgetIdGet(dashboardId, widgetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        POST api/widgets/dashboardId
     * @summary Sets widget settings
     * @param {string} dashboardId Dashboard identifier
     * @param {string} widgetId Widget identifier
     * @param {DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange} [docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange] Changes of widget settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WidgetsApi
     */
    public apiWidgetsDashboardIdWidgetIdPost(dashboardId: string, widgetId: string, docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange?: DocsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange, options?: AxiosRequestConfig) {
        return WidgetsApiFp(this.configuration).apiWidgetsDashboardIdWidgetIdPost(dashboardId, widgetId, docsVisionWebAdminConsoleLogicWidgetsWidgetSettingsChange, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkerInstancesApi - axios parameter creator
 * @export
 */
export const WorkerInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET api/workerinstances
         * @summary Get info about worker service instances and configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/WorkerInstances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/workerinstances/{workerInstanceId}
         * @summary Get info about worker instance and configuration
         * @param {string} workerInstanceId Worker instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdGet: async (workerInstanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerInstanceId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdGet', 'workerInstanceId', workerInstanceId)
            const localVarPath = `/api/WorkerInstances/{workerInstanceId}`
                .replace(`{${"workerInstanceId"}}`, encodeURIComponent(String(workerInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new configuration of worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel] Worker process configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdProcessesPost: async (workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerInstanceId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdProcessesPost', 'workerInstanceId', workerInstanceId)
            const localVarPath = `/api/WorkerInstances/{workerInstanceId}/processes`
                .replace(`{${"workerInstanceId"}}`, encodeURIComponent(String(workerInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove exist configuration of worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {string} processId Process ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdProcessesProcessIdDelete: async (workerInstanceId: string, processId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerInstanceId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdProcessesProcessIdDelete', 'workerInstanceId', workerInstanceId)
            // verify required parameter 'processId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdProcessesProcessIdDelete', 'processId', processId)
            const localVarPath = `/api/WorkerInstances/{workerInstanceId}/processes/{processId}`
                .replace(`{${"workerInstanceId"}}`, encodeURIComponent(String(workerInstanceId)))
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET api/workerinstances/{workerInstanceId}/{processId}
         * @summary Get info about worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {string} processId Process ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdProcessesProcessIdGet: async (workerInstanceId: string, processId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerInstanceId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdProcessesProcessIdGet', 'workerInstanceId', workerInstanceId)
            // verify required parameter 'processId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdProcessesProcessIdGet', 'processId', processId)
            const localVarPath = `/api/WorkerInstances/{workerInstanceId}/processes/{processId}`
                .replace(`{${"workerInstanceId"}}`, encodeURIComponent(String(workerInstanceId)))
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets a configuration of worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel] Worker process configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdProcessesPut: async (workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerInstanceId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdProcessesPut', 'workerInstanceId', workerInstanceId)
            const localVarPath = `/api/WorkerInstances/{workerInstanceId}/processes`
                .replace(`{${"workerInstanceId"}}`, encodeURIComponent(String(workerInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT api/workerinstances/{workerInstanceId}
         * @summary Sets a configuration of worker service instance
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel] Worker instance configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdPut: async (workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerInstanceId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdPut', 'workerInstanceId', workerInstanceId)
            const localVarPath = `/api/WorkerInstances/{workerInstanceId}`
                .replace(`{${"workerInstanceId"}}`, encodeURIComponent(String(workerInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workerInstanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdRecycleGet: async (workerInstanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerInstanceId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdRecycleGet', 'workerInstanceId', workerInstanceId)
            const localVarPath = `/api/WorkerInstances/{workerInstanceId}/recycle`
                .replace(`{${"workerInstanceId"}}`, encodeURIComponent(String(workerInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workerInstanceId 
         * @param {string} processName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdRecycleProcessNameGet: async (workerInstanceId: string, processName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerInstanceId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdRecycleProcessNameGet', 'workerInstanceId', workerInstanceId)
            // verify required parameter 'processName' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdRecycleProcessNameGet', 'processName', processName)
            const localVarPath = `/api/WorkerInstances/{workerInstanceId}/recycle/{processName}`
                .replace(`{${"workerInstanceId"}}`, encodeURIComponent(String(workerInstanceId)))
                .replace(`{${"processName"}}`, encodeURIComponent(String(processName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT api/workerinstances/{workerInstanceId}/setting
         * @summary Sets a base configuration of worker service instance
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel] Worker instance base settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdSettingsPut: async (workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerInstanceId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdSettingsPut', 'workerInstanceId', workerInstanceId)
            const localVarPath = `/api/WorkerInstances/{workerInstanceId}/settings`
                .replace(`{${"workerInstanceId"}}`, encodeURIComponent(String(workerInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get status of worker instance
         * @param {string} workerInstanceId Worker instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdStatusGet: async (workerInstanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerInstanceId' is not null or undefined
            assertParamExists('apiWorkerInstancesWorkerInstanceIdStatusGet', 'workerInstanceId', workerInstanceId)
            const localVarPath = `/api/WorkerInstances/{workerInstanceId}/status`
                .replace(`{${"workerInstanceId"}}`, encodeURIComponent(String(workerInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkerInstancesApi - functional programming interface
 * @export
 */
export const WorkerInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkerInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Sample request:        GET api/workerinstances
         * @summary Get info about worker service instances and configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerInstancesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesWorkerInstanceAndConfigModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerInstancesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/workerinstances/{workerInstanceId}
         * @summary Get info about worker instance and configuration
         * @param {string} workerInstanceId Worker instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerInstancesWorkerInstanceIdGet(workerInstanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesWorkerInstanceAndConfigModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerInstancesWorkerInstanceIdGet(workerInstanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a new configuration of worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel] Worker process configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerInstancesWorkerInstanceIdProcessesPost(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerInstancesWorkerInstanceIdProcessesPost(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove exist configuration of worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {string} processId Process ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerInstancesWorkerInstanceIdProcessesProcessIdDelete(workerInstanceId: string, processId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerInstancesWorkerInstanceIdProcessesProcessIdDelete(workerInstanceId, processId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        GET api/workerinstances/{workerInstanceId}/{processId}
         * @summary Get info about worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {string} processId Process ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerInstancesWorkerInstanceIdProcessesProcessIdGet(workerInstanceId: string, processId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerInstancesWorkerInstanceIdProcessesProcessIdGet(workerInstanceId, processId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets a configuration of worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel] Worker process configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerInstancesWorkerInstanceIdProcessesPut(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerInstancesWorkerInstanceIdProcessesPut(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        PUT api/workerinstances/{workerInstanceId}
         * @summary Sets a configuration of worker service instance
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel] Worker instance configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerInstancesWorkerInstanceIdPut(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerInstancesWorkerInstanceIdPut(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} workerInstanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerInstancesWorkerInstanceIdRecycleGet(workerInstanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerInstancesWorkerInstanceIdRecycleGet(workerInstanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} workerInstanceId 
         * @param {string} processName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerInstancesWorkerInstanceIdRecycleProcessNameGet(workerInstanceId: string, processName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerInstancesWorkerInstanceIdRecycleProcessNameGet(workerInstanceId, processName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sample request:        PUT api/workerinstances/{workerInstanceId}/setting
         * @summary Sets a base configuration of worker service instance
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel] Worker instance base settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerInstancesWorkerInstanceIdSettingsPut(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerInstancesWorkerInstanceIdSettingsPut(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get status of worker instance
         * @param {string} workerInstanceId Worker instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkerInstancesWorkerInstanceIdStatusGet(workerInstanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkerInstancesWorkerInstanceIdStatusGet(workerInstanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkerInstancesApi - factory interface
 * @export
 */
export const WorkerInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkerInstancesApiFp(configuration)
    return {
        /**
         * Sample request:        GET api/workerinstances
         * @summary Get info about worker service instances and configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesGet(options?: any): AxiosPromise<Array<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesWorkerInstanceAndConfigModel>> {
            return localVarFp.apiWorkerInstancesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/workerinstances/{workerInstanceId}
         * @summary Get info about worker instance and configuration
         * @param {string} workerInstanceId Worker instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdGet(workerInstanceId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionModelsResponsesWorkerInstanceAndConfigModel> {
            return localVarFp.apiWorkerInstancesWorkerInstanceIdGet(workerInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new configuration of worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel] Worker process configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdProcessesPost(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiWorkerInstancesWorkerInstanceIdProcessesPost(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove exist configuration of worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {string} processId Process ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdProcessesProcessIdDelete(workerInstanceId: string, processId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiWorkerInstancesWorkerInstanceIdProcessesProcessIdDelete(workerInstanceId, processId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        GET api/workerinstances/{workerInstanceId}/{processId}
         * @summary Get info about worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {string} processId Process ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdProcessesProcessIdGet(workerInstanceId: string, processId: string, options?: any): AxiosPromise<DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel> {
            return localVarFp.apiWorkerInstancesWorkerInstanceIdProcessesProcessIdGet(workerInstanceId, processId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets a configuration of worker instance process
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel] Worker process configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdProcessesPut(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiWorkerInstancesWorkerInstanceIdProcessesPut(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        PUT api/workerinstances/{workerInstanceId}
         * @summary Sets a configuration of worker service instance
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel] Worker instance configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdPut(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiWorkerInstancesWorkerInstanceIdPut(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workerInstanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdRecycleGet(workerInstanceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiWorkerInstancesWorkerInstanceIdRecycleGet(workerInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workerInstanceId 
         * @param {string} processName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdRecycleProcessNameGet(workerInstanceId: string, processName: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiWorkerInstancesWorkerInstanceIdRecycleProcessNameGet(workerInstanceId, processName, options).then((request) => request(axios, basePath));
        },
        /**
         * Sample request:        PUT api/workerinstances/{workerInstanceId}/setting
         * @summary Sets a base configuration of worker service instance
         * @param {string} workerInstanceId Worker instance ID
         * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel] Worker instance base settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdSettingsPut(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiWorkerInstancesWorkerInstanceIdSettingsPut(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get status of worker instance
         * @param {string} workerInstanceId Worker instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkerInstancesWorkerInstanceIdStatusGet(workerInstanceId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiWorkerInstancesWorkerInstanceIdStatusGet(workerInstanceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkerInstancesApi - object-oriented interface
 * @export
 * @class WorkerInstancesApi
 * @extends {BaseAPI}
 */
export class WorkerInstancesApi extends BaseAPI {
    /**
     * Sample request:        GET api/workerinstances
     * @summary Get info about worker service instances and configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerInstancesApi
     */
    public apiWorkerInstancesGet(options?: AxiosRequestConfig) {
        return WorkerInstancesApiFp(this.configuration).apiWorkerInstancesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/workerinstances/{workerInstanceId}
     * @summary Get info about worker instance and configuration
     * @param {string} workerInstanceId Worker instance ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerInstancesApi
     */
    public apiWorkerInstancesWorkerInstanceIdGet(workerInstanceId: string, options?: AxiosRequestConfig) {
        return WorkerInstancesApiFp(this.configuration).apiWorkerInstancesWorkerInstanceIdGet(workerInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a new configuration of worker instance process
     * @param {string} workerInstanceId Worker instance ID
     * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel] Worker process configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerInstancesApi
     */
    public apiWorkerInstancesWorkerInstanceIdProcessesPost(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options?: AxiosRequestConfig) {
        return WorkerInstancesApiFp(this.configuration).apiWorkerInstancesWorkerInstanceIdProcessesPost(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove exist configuration of worker instance process
     * @param {string} workerInstanceId Worker instance ID
     * @param {string} processId Process ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerInstancesApi
     */
    public apiWorkerInstancesWorkerInstanceIdProcessesProcessIdDelete(workerInstanceId: string, processId: string, options?: AxiosRequestConfig) {
        return WorkerInstancesApiFp(this.configuration).apiWorkerInstancesWorkerInstanceIdProcessesProcessIdDelete(workerInstanceId, processId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        GET api/workerinstances/{workerInstanceId}/{processId}
     * @summary Get info about worker instance process
     * @param {string} workerInstanceId Worker instance ID
     * @param {string} processId Process ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerInstancesApi
     */
    public apiWorkerInstancesWorkerInstanceIdProcessesProcessIdGet(workerInstanceId: string, processId: string, options?: AxiosRequestConfig) {
        return WorkerInstancesApiFp(this.configuration).apiWorkerInstancesWorkerInstanceIdProcessesProcessIdGet(workerInstanceId, processId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets a configuration of worker instance process
     * @param {string} workerInstanceId Worker instance ID
     * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel] Worker process configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerInstancesApi
     */
    public apiWorkerInstancesWorkerInstanceIdProcessesPut(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options?: AxiosRequestConfig) {
        return WorkerInstancesApiFp(this.configuration).apiWorkerInstancesWorkerInstanceIdProcessesPut(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsProcessConfigurationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        PUT api/workerinstances/{workerInstanceId}
     * @summary Sets a configuration of worker service instance
     * @param {string} workerInstanceId Worker instance ID
     * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel] Worker instance configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerInstancesApi
     */
    public apiWorkerInstancesWorkerInstanceIdPut(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel, options?: AxiosRequestConfig) {
        return WorkerInstancesApiFp(this.configuration).apiWorkerInstancesWorkerInstanceIdPut(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerConfigurationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workerInstanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerInstancesApi
     */
    public apiWorkerInstancesWorkerInstanceIdRecycleGet(workerInstanceId: string, options?: AxiosRequestConfig) {
        return WorkerInstancesApiFp(this.configuration).apiWorkerInstancesWorkerInstanceIdRecycleGet(workerInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workerInstanceId 
     * @param {string} processName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerInstancesApi
     */
    public apiWorkerInstancesWorkerInstanceIdRecycleProcessNameGet(workerInstanceId: string, processName: string, options?: AxiosRequestConfig) {
        return WorkerInstancesApiFp(this.configuration).apiWorkerInstancesWorkerInstanceIdRecycleProcessNameGet(workerInstanceId, processName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sample request:        PUT api/workerinstances/{workerInstanceId}/setting
     * @summary Sets a base configuration of worker service instance
     * @param {string} workerInstanceId Worker instance ID
     * @param {DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel} [docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel] Worker instance base settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerInstancesApi
     */
    public apiWorkerInstancesWorkerInstanceIdSettingsPut(workerInstanceId: string, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel?: DocsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel, options?: AxiosRequestConfig) {
        return WorkerInstancesApiFp(this.configuration).apiWorkerInstancesWorkerInstanceIdSettingsPut(workerInstanceId, docsVisionWebAdminConsoleWorkerExtensionWorkerModelsWorkerSettingsModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get status of worker instance
     * @param {string} workerInstanceId Worker instance ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerInstancesApi
     */
    public apiWorkerInstancesWorkerInstanceIdStatusGet(workerInstanceId: string, options?: AxiosRequestConfig) {
        return WorkerInstancesApiFp(this.configuration).apiWorkerInstancesWorkerInstanceIdStatusGet(workerInstanceId, options).then((request) => request(this.axios, this.basePath));
    }
}



